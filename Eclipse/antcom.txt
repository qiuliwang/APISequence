Add a nested task. <p>
Execute all nestedTasks.
return the phase of the moon. Note the completely different semantics of the other implementation, which goes to show why signature is an inadequate way of verifying how well an interface is implemented.
Create an Ant ClassLoader for a given project, with a parent classloader and an initial classpath.
Create an Ant Class Loader
Creates a classloader for the given project using the classpath given.
Creates a classloader for the given project using the classpath given.
Creates an empty class loader. The classloader should be configured with path elements to specify where the loader is to look for classes.
Set the project associated with this class loader
Set the classpath to search for classes to load. This should not be changed once the classloader starts to server classes
Logs a message through the project object if one has been provided.
Sets the current thread's context loader to this classloader, storing the current loader value for later resetting.
Resets the current thread's context loader to its original value.
Adds an element to the classpath to be searched.
Add a path component. This simply adds the file, unlike addPathElement it does not open jar files and load files from their CLASSPATH entry in the manifest file.
Add a file to the path. Reads the manifest, if available, and adds any additional class path jars specified in the manifest.
Returns the classpath this classloader will consult.
Forces initialization of a class in a JDK 1.1 compatible, albeit hacky way.
Adds a package root to the list of packages which must be loaded on the parent loader. All subpackages are also included.
Adds a package root to the list of packages which must be loaded using this loader. All subpackages are also included.
Loads a class through this class loader even if that class is available on the parent classpath. This ensures that any classes which are loaded by the returned class will use this classloader.
Loads a class through this class loader but defer to the parent class loader. This ensures that instances of the returned class will be compatible with instances which have already been loaded on the parent loader.
Returns a stream to read the requested resource name.
Returns a stream to read the requested resource name from this loader.
Used for isolated resource seaching.
Finds the resource with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code.
Returns an enumeration of URLs representing all the resources with the given name by searching the class loader's classpath.
Loads a class with this class loader. This class attempts to load the class in an order determined by whether or not the class matches the system/loader package lists, with the loader package list taking priority. If the classloader is in isolated mode, failure to load the class in this loader will result in a ClassNotFoundException.
Define a class given its bytes
Define the package information associated with a class.
Get the manifest from the given jar, if it is indeed a jar and it has a manifest
Get the certificates for a given jar entry, if it is indeed a jar.
Define the package information when the class comes from a jar with a manifest
Reads a class definition from a stream.
Searches for and load a class on the classpath of this class loader.
Finds a class on the given classpath.
Cleans up any resources held by this classloader. Any open archive files are closed.
Cleans up any resources held by this classloader at the end of a build.
Cleans up any resources held by this classloader at the end of a subbuild if it has been created for the subbuild's project instance.
add any libraries that come with different java versions here
{@inheritDoc} 
Create a component object based on its definition.
Checks if the attributes are correct. <ul> <li>if the class can be created.</li> <li>if an adapter class can be created</li> <li>if the type is assignable from adapter</li> <li>if the type can be used with the adapter class</li> </ul>
Inner implementation of the  {@link #createAndSet(Project,Class)} logic, with noexception catching.
Similar definition; used to compare two definitions defined twice with the same name and the same types. The classloader may be different but have the same path so #sameDefinition cannot be used.
Construct a BuildEvent for a target level event. The project associated with the event is derived from the given target.
Construct a BuildEvent for a task level event. The project and target associated with the event are derived from the given task.
Find a project component for a specific project, creating it if it does not exist.
Used with creating child projects. Each child project inherits the component definitions from its parent.
Factory method to create the components. This should be called by UnknownElement.
Create an object for a component.
Return the class of the component name.
Return the antTypeDefinition for a componentName.
This method is initialization code implementing the original ant component loading from /org/apache/tools/ant/taskdefs/default.properties and /org/apache/tools/ant/types/default.properties.
Adds a new task definition to the project. Attempting to override an existing definition with an equivalent one (i.e. with the same classname) results in a verbose log message. Attempting to override an existing definition with a different one results in a warning log message.
Checks whether or not a class is suitable for serving as Ant task. Ant task implementation classes must be public, concrete, and have a no-arg constructor.
Adds a new datatype definition. Attempting to override an existing definition with an equivalent one (i.e. with the same classname) results in a verbose log message. Attempting to override an existing definition with a different one results in a warning log message, but the definition is changed.
Describe <code>addDataTypeDefinition</code> method here.
Creates a new instance of a task. Called from Project.createTask(), which can be called by tasks.
Creates a new instance of a task.
Returns a description of the type of the given element. <p> This is useful for logging purposes.
update the restricted definition table with a new or modified definition.
Update the component definition table with a new or modified definition.
Called at the start of processing an antlib.
Called at the end of processing an antlib.
Load ant's tasks.
Load ant's datatypes.
Called for each component name, check if the associated URI has been examined for antlibs.
Handler called to do decent diagnosis on instantiation failure.
Print unknown definition.forking
Print class not found.
Print could not load dependent class.
Create a list of all definitions that match a prefix, usually the URI of a library
Register the definitions.
Responds to a build being started by just remembering the current time.
Prints whether the build succeeded or failed, any errors the occurred during the build, and how long the build took.
Logs a message to say that the target has started if this logger allows information-level messages.
Logs a message, if the priority is suitable. In non-emacs mode, task level messages are prefixed by the task name which is right-justified.
Prints a message to a PrintStream.
Get the current time.
Get the project name or null
Read a byte from the project's demuxed input.
Returns the buffer associated with the current thread.
Resets the buffer for the current thread.
Removes the buffer for the current thread.
Writes the data to the buffer and flushes the buffer if a line separator is detected or if the buffer has reached its maximum size.
Converts the buffer to a string and sends it to the project.
Converts the buffer to a string and sends it to the project.
Equivalent to flushing the stream.
Writes all remaining data in the buffer associated with the current thread to the project.
Write a block of characters to the output stream
return the list of jar files existing in ANT_HOME/lib and that must have been picked up by Ant script.
get a list of all JAR files in a directory
main entry point for command line
what parser are we using.
what parser are we using.
Create a JAXP SAXParser
Create a JAXP XSLT Transformer
get the location of the parser
get the location of the parser
Print a report to the given stream.
Print a report to the given stream.
Report a listing of system properties existing in the current vm.
Report the content of ANT_HOME/lib directory
Report the content of ANT_HOME/lib directory
Report the content of ~/.ant/lib directory
Call org.apache.env.Which if available
Create a report about non-available tasks that are defined in the mapping but could not be found via lookup. It might generally happen because Ant requires multiple libraries to compile and one of them was missing when compiling Ant.
tell the user about the XML parser
tell the user about the XSLT processor
try and create a temp file in our temp dir; this checks that it has space and access. We also do some clock reporting.
Report locale information
Report proxy information
Set the base directory to be scanned. This is the directory which is scanned recursively. All '/' and '\' characters are replaced by <code>File.separatorChar</code>, so the separator used need not match <code>File.separatorChar</code>.
All '/' and '\' characters are replaced by <code>File.separatorChar</code>, so the separator used need not match <code>File.separatorChar</code>. <p> When a pattern ends with a '/' or '\', "**" is appended.
Scan for files which match at least one include pattern and don't match any exclude patterns. If there are selectors then the files must pass muster there, as well.  Scans under basedir, if set; otherwise the include patterns without leading wildcards specify the absolute paths of the files that may be included.
This routine is actually checking all the include patterns in order to avoid scanning everything under base dir.
Clear the result caches for a scan.
Scan the given directory for files and directories. Found files and directories are placed in their respective collections, based on the matching of includes, excludes, and the selectors.  When a directory is found, it is scanned recursively.
Scan the given directory for files and directories. Found files and directories are placed in their respective collections, based on the matching of includes, excludes, and the selectors.  When a directory is found, it is scanned recursively.
Process included file.
Process included directory.
Test whether or not a name matches against at least one include pattern.
Test whether or not a name matches against at least one exclude pattern.
Return the names of the files which matched at least one of the include patterns and none of the exclude patterns. The names are relative to the base directory.
Return the names of the files which matched none of the include patterns. The names are relative to the base directory. This involves performing a slow scan if one has not already been completed.
Return the names of the files which matched at least one of the include patterns and at least one of the exclude patterns. The names are relative to the base directory. This involves performing a slow scan if one has not already been completed.
Return the names of the directories which matched at least one of the include patterns and none of the exclude patterns. The names are relative to the base directory.
Return the names of the directories which matched none of the include patterns. The names are relative to the base directory. This involves performing a slow scan if one has not already been completed.
Return the names of the directories which matched at least one of the include patterns and at least one of the exclude patterns. The names are relative to the base directory. This involves performing a slow scan if one has not already been completed.
Absolute paths of all symbolic links that haven't been followed but would have been followed had followsymlinks been true or maxLevelsOfSymlinks been bigger.
Add default exclusions to the current exclusions set.
Clear internal caches.
Add all patterns that are not real patterns (do not contain wildcards) to the set and returns the real patterns.
Sole constructor, which is private to ensure that all IntrospectionHelpers are created via  {@link #getHelper(Class) getHelper}. Introspects the given class for bean-like methods. Each method is examined in turn, and the following rules are applied: <p> <ul> <li>If the method is <code>Task.setLocation(Location)</code>, <code>Task.setTaskType(String)</code> or <code>TaskContainer.addTask(Task)</code>, it is ignored. These methods are handled differently elsewhere. <li><code>void addText(String)</code> is recognised as the method for adding PCDATA to a bean. <li><code>void setFoo(Bar)</code> is recognised as a method for setting the value of attribute <code>foo</code>, so long as <code>Bar</code> is non-void and is not an array type. As of Ant 1.8, a Resource or FileProvider parameter overrides a java.io.File parameter; in practice the only effect of this is to allow objects rendered from the 1.8 PropertyHelper implementation to be used as Resource parameters, since Resources set from Strings are resolved as project-relative files to preserve backward compatibility.  Beyond this, non-String parameter types always overload String parameter types; these are the only guarantees made in terms of priority. <li><code>Foo createBar()</code> is recognised as a method for creating a nested element called <code>bar</code> of type <code>Foo</code>, so long as <code>Foo</code> is not a primitive or array type. <li><code>void addConfiguredFoo(Bar)</code> is recognised as a method for storing a pre-configured element called <code>foo</code> and of type <code>Bar</code>, so long as <code>Bar</code> is not an array, primitive or String type. <code>Bar</code> must have an accessible constructor taking no arguments. <li><code>void addFoo(Bar)</code> is recognised as a method for storing an element called <code>foo</code> and of type <code>Bar</code>, so long as <code>Bar</code> is not an array, primitive or String type. <code>Bar</code> must have an accessible constructor taking no arguments. This is distinct from the 'addConfigured' idiom in that the nested element is added to the parent immediately after it is constructed; in practice this means that <code>addFoo(Bar)</code> should do little or nothing with its argument besides storing it for later use. </ul> Note that only one method is retained to create/set/addConfigured/add any element or attribute.
Returns a helper for the given class, either from the cache or by creating a new instance. The method will make sure the helper will be cleaned up at the end of the project, and only one instance will be created for each class.
Sets the named attribute in the given element, which is part of the given project.
Sets the named attribute in the given element, which is part of the given project.
Get the specific NestedCreator for a given project/parent/element combination
Invokes the "correct" createDynamicElement method on parent in order to obtain a child element by name.
Creates a named nested element. Depending on the results of the initial introspection, either a method in the given parent instance or a simple no-arg constructor is used to create an instance of the specified element type.
returns an object that creates and stores an object for an element of a parent.
Check if this element supports a nested element from reflection.
Stores a named nested element using a storage method determined by the initial introspection. If no appropriate storage method is available, this method returns immediately.
Helper method to extract the inner fault from an  {@link InvocationTargetException}, and turn it into a BuildException. If it is already a BuildException, it is type cast and returned; if not a new BuildException is created containing the child as nested text.
Returns the type of a named nested element.
Returns the type of a named attribute.
Returns the adder or creator method of a named nested element.
Returns the setter method of a named attribute.
Creates an implementation of AttributeSetter for the given attribute type. Conversions (where necessary) are automatically made for the following types: <ul> <li>String (left as it is) <li>Character/char (first character is used) <li>Boolean/boolean ( {@link Project#toBoolean(String) Project.toBoolean(String)} is used)<li>Class (Class.forName is used) <li>File (resolved relative to the appropriate project) <li>Path (resolve relative to the appropriate project) <li>Resource (resolved as a FileResource relative to the appropriate project) <li>FileProvider (resolved as a FileResource relative to the appropriate project) <li>EnumeratedAttribute (uses its own {@link EnumeratedAttribute#setValue(String) setValue} method)<li>Other primitive types (wrapper classes are used with constructors taking String) </ul> If none of the above covers the given parameters, a constructor for the appropriate class taking a String parameter is used if it is available.
Clears the static cache of on build finished.
Create a NestedCreator for the given element.
Inserts an add or addConfigured method into the addTypeMethods array. The array is ordered so that the more derived classes are first. If both add and addConfigured are present, the addConfigured will take priority.
Search the list of methods to find the first method that has a parameter that accepts the nested element object.
Returns the file name, line number, a colon and a trailing space. An error message can be appended easily. For unknown locations, an empty string is returned.
Prints the message of the Throwable if it (the message) is not <code>null</code>.
Creates a new instance of this class using the arguments specified, gives it any extra user properties which have been specified, and then runs the build using the classloader provided.
Start Ant
This operation is expected to call  {@link System#exit(int)}, which is what the base version does. However, it is possible to do something else.
Close logfiles, if we have been writing to them.
Command line entry point. This method kicks off the building of a project object and executes a build using either a given target or the default target.
Sole constructor, which parses and deals with command line arguments.
Process command line arguments. When ant is started from Launcher, launcher-only arguments do not get passed through to this routine.
Handler -D argument 
Helper to get the parent file for a given file. <p> Added to simulate File.getParentFile() from JDK 1.2.
Search parent directories for the build file. <p> Takes the given target as a suffix to append to each parent directory in search of a build file.  Once the root of the file-system has been reached <code>null</code> is returned.
Executes the build. If the constructor for this instance failed (e.g. returned after issuing a warning), this method returns immediately.
Adds the listeners specified in the command line arguments, along with the default listener, to the specified project.
Creates the InputHandler and adds it to the project.
Creates the default build logger for sending build events to the ant log.
Returns the short Ant version information, if available. Once the information has been loaded once, it's cached and returned from the cache on future calls.
Prints the description of a project (if there is one) to <code>System.out</code>.
Targets in imported files with a project name and not overloaded by the main build file will be in the target map twice. This method removes the duplicate target.
Prints a list of all targets in the specified project to <code>System.out</code>, optionally including subtargets.
Searches for the correct place to insert a name into a list so as to keep the list sorted alphabetically.
Writes a formatted list of target names to <code>System.out</code> with an optional description.
Create and initialize a subproject. By default the subproject will be of the same type as its parent. If a no-arg constructor is unavailable, the <code>Project</code> class will be used.
Initialize a subproject.
Initialise the project. This involves setting the default task definitions and loading the system properties.
Initializes the properties.
Set a property to the location of ant.jar. Use the locator to find the location of the Project.class, and if this is not null, set the property  {@link MagicNames#ANT_LIB}to the result
Write a message to the log with the default log level of MSG_INFO .
Write a project level message to the log with the given log level.
Write a project level message to the log with the given log level.
Write a task level message to the log with the given log level.
Write a task level message to the log with the given log level.
Write a target level message to the log with the given log level.
Write a target level message to the log with the given log level.
Set a property. Any existing property of the same name is overwritten, unless it is a user property.
Set a property if no value currently exists. If the property exists already, a message is logged and the method returns with no other effect.
Set a user property, which cannot be overwritten by set/unset property calls. Any previous value is overwritten.
Set a user property, which cannot be overwritten by set/unset property calls. Any previous value is overwritten. Also marks these properties as properties that have not come from the command line.
Set a property unless it is already defined as a user property (in which case the method returns silently).
Return the value of a property, if it is set.
Copy all user properties that have been set on the command line or a GUI tool from this instance to the Project instance given as the argument. <p>To copy all &quot;user&quot; properties, you will also have to call {@link #copyInheritedProperties copyInheritedProperties}.</p>
Copy all user properties that have not been set on the command line or a GUI tool from this instance to the Project instance given as the argument. <p>To copy all &quot;user&quot; properties, you will also have to call {@link #copyUserProperties copyUserProperties}.</p>
Set the default target of the project.
Set the default target of the project.
Set the name of the project, also setting the user property <code>ant.project.name</code>.
Add a filter to the set of global filters.
Set the base directory for the project, checking that the given filename exists and is a directory.
Set the base directory for the project, checking that the given file exists and is a directory.
Set the <code>ant.java.version</code> property and tests for unsupported JVM versions. If the version is supported, verbose log messages are generated to record the Java version and operating system name.
Add all system properties which aren't already defined as user properties to the project properties.
Add a new task definition to the project. Attempting to override an existing definition with an equivalent one (i.e. with the same classname) results in a verbose log message. Attempting to override an existing definition with a different one results in a warning log message and invalidates any tasks which have already been created with the old definition.
Check whether or not a class is suitable for serving as Ant task. Ant task implementation classes must be public, concrete, and have a no-arg constructor.
Add a new datatype definition. Attempting to override an existing definition with an equivalent one (i.e. with the same classname) results in a verbose log message. Attempting to override an existing definition with a different one results in a warning log message, but the definition is changed.
Add a <em>new</em> target to the project.
Add a <em>new</em> target to the project.
Add a target to the project, or replaces one with the same name.
Add a target to the project, or replaces one with the same name.
Set the Executor instance for this Project.
Get this Project's Executor (setting it if necessary).
Execute the specified sequence of targets, and the targets they depend on.
Demultiplex output so that each task receives the appropriate messages. If the current thread is not currently executing a task, the message is logged directly.
Read data from the default input stream. If no default has been specified, System.in is used.
Demux an input request to the correct task.
Demultiplex flush operations so that each task receives the appropriate messages. If the current thread is not currently executing a task, the message is logged directly.
Execute the specified target and any targets it depends on.
Execute a <code>Vector</code> of sorted targets.
Convenience method to copy a file from a source to a destination. No filtering is performed.
Convenience method to copy a file from a source to a destination specifying if token filtering should be used.
Convenience method to copy a file from a source to a destination specifying if token filtering should be used and if source files may overwrite newer destination files.
Convenience method to copy a file from a source to a destination specifying if token filtering should be used, if source files may overwrite newer destination files, and if the last modified time of the resulting file should be set to that of the source file.
Convenience method to copy a file from a source to a destination. No filtering is performed.
Convenience method to copy a file from a source to a destination specifying if token filtering should be used.
Convenience method to copy a file from a source to a destination specifying if token filtering should be used and if source files may overwrite newer destination files.
Convenience method to copy a file from a source to a destination specifying if token filtering should be used, if source files may overwrite newer destination files, and if the last modified time of the resulting file should be set to that of the source file.
Call File.setLastModified(long time) on Java above 1.1, and logs a warning on Java 1.1.
Topologically sort a set of targets.
Perform a single step in a recursive depth-first-search traversal of the target dependency tree. <p> The current target is first set to the &quot;visiting&quot; state, and pushed onto the &quot;visiting&quot; stack. <p> An exception is then thrown if any child of the current node is in the visiting state, as that implies a circular dependency. The exception contains details of the cycle, using elements of the &quot;visiting&quot; stack. <p> If any child has not already been &quot;visited&quot;, this method is called recursively on it. <p> The current target is then added to the ordered list of targets. Note that this is performed after the children have been visited in order to get the correct order. The current target is set to the &quot;visited&quot; state. <p> By the time this method returns, the ordered list contains the sequence of targets up to and including the current target.
Build an appropriate exception detailing a specified circular dependency.
Add an id reference. Used for broken build files.
Add a reference to the project.
Look up a reference by its key (ID).
Send a &quot;build started&quot; event to the build listeners for this project.
Send a &quot;build finished&quot; event to the build listeners for this project.
Send a &quot;subbuild started&quot; event to the build listeners for this project.
Send a &quot;subbuild finished&quot; event to the build listeners for this project.
Send a &quot;target started&quot; event to the build listeners for this project.
Send a &quot;target finished&quot; event to the build listeners for this project.
Send a &quot;task started&quot; event to the build listeners for this project.
Send a &quot;task finished&quot; event to the build listeners for this project.
Send a &quot;message logged&quot; event to the build listeners for this project.
Send a &quot;message logged&quot; project level event to the build listeners for this project.
Send a &quot;message logged&quot; project level event to the build listeners for this project.
Send a &quot;message logged&quot; target level event to the build listeners for this project.
Send a &quot;message logged&quot; target level event to the build listeners for this project.
Send a &quot;message logged&quot; task level event to the build listeners for this project.
Send a &quot;message logged&quot; task level event to the build listeners for this project.
Set a reference to this Project on the parameterized object. Need to set the project before other set/add elements are called.
Logs a message with the default (INFO) priority.
Logs a message with the given priority.
Configures the project with the contents of the specified build file.
Sets the prefix to prepend to imported target names.
Sets the separator between the prefix and the target name.
Sets whether the current file should be read in include as opposed to import mode.
Configures an object using an introspection handler.
Adds the content of #PCDATA sections to an element.
Adds the content of #PCDATA sections to an element.
Stores a configured child element within its parent object.
Replaces <code>${xxx}</code> style constructions in the given value with the string value of the corresponding data types.
Parses a string containing <code>${xxx}</code> style property references into two lists. The first list is a collection of text fragments, while the other is a set of string property names. <code>null</code> entries in the first list indicate a property reference from the second list. <p>As of Ant 1.8.0 this method is never invoked by any code inside of Ant itself.</p>
extract a uri from a component name
extract the element name from a component name
Register the specified project helper into the repository. <p> The helper will be added after all the already registered helpers, but before the default one (ProjectHelper2)
Get the constructor with not argument of an helper from its class name. It'll first try the thread class loader, then Class.forName() will load from the same loader that loaded this class.
Default constructor.
A helper static method to set a property from a particular project.
A helper static method to set a new property from a particular project.
Factory method to create a property processor. Users can provide their own or replace it using "ant.PropertyHelper" reference. User tasks can also add themselves to the chain, and provide dynamic properties.
Parses a string containing <code>${xxx}</code> style property references into two lists. The first list is a collection of text fragments, while the other is a set of string property names. <code>null</code> entries in the first list indicate a property reference from the second list. <p>Delegates to  {@link #parsePropertyStringDefault parsePropertyStringDefault}.</p> <p>As of Ant 1.8.0 this method is never invoked by any code inside of Ant itself except {ProjectHelper#parsePropertyString ProjectHelper.parsePropertyString}.</p>
Replaces <code>${xxx}</code> style constructions in the given value with the string value of the corresponding data types.
Sets a property if no value currently exists. If the property exists already, a message is logged and the method returns with no other effect. <p>Delegates to the two-arg version, completely ignoring the ns parameter.</p>
Sets a user property, which cannot be overwritten by set/unset property calls. Any previous value is overwritten. <p>Delegates to the two-arg version, completely ignoring the ns parameter.</p>
Sets a user property, which cannot be overwritten by set/unset property calls. Any previous value is overwritten. <p>Does <code>not</code> consult any delegates.</p>
Sets an inherited user property, which cannot be overwritten by set/unset property calls. Any previous value is overwritten. Also marks these properties as properties that have not come from the command line. <p>Delegates to the two-arg version, completely ignoring the ns parameter.</p>
Sets an inherited user property, which cannot be overwritten by set/unset property calls. Any previous value is overwritten. Also marks these properties as properties that have not come from the command line. <p>Does <code>not</code> consult any delegates.</p>
Default parsing method. It is here only to support backward compatibility for the static ProjectHelper.parsePropertyString().
Get the Collection of delegates of the specified type.
Get all Delegate interfaces (excluding Delegate itself) from the specified Delegate.
Returns true if the value can be interpreted as a true value or cannot be interpreted as a false value and a property of the value's name exists.
Sole constructor creating a wrapper for the specified object.
Check if an UE is enabled. This looks tru the attributes and checks if there are any Ant attributes, and if so, the method calls the isEnabled() method on them.
Sets the attributes for the wrapped element.
Set an attribute to a given value.
Delete an attribute.  Not for the faint of heart.
Adds a child element to the wrapped element.
Adds characters from #PCDATA areas to the wrapped element.
Configures the wrapped element and all its children. The attributes and text for the wrapped element are configured, and then each child is configured and added. Each time the wrapper is configured, the attributes and text for it are reset. If the element has an <code>id</code> attribute, a reference is added to the project as well.
Configures the wrapped element.  The attributes and text for the wrapped element are configured.  Each time the wrapper is configured, the attributes and text for it are reset. If the element has an <code>id</code> attribute, a reference is added to the project as well.
Reconfigure the element, even if it has already been configured.
Apply presets, attributes and text are set if not currently set. Nested elements are prepended.
Adds a task to this target.
Adds the wrapper for a data type element to this target.
Returns the current set of tasks to be executed by this target.
Adds a dependency to this target.
Does this target depend on the named target?
Sets the "if" condition to test on execution. This is the name of a property to test for existence - if the property is not set, the task will not execute. The property goes through property substitution once before testing, so if property <code>foo</code> has value <code>bar</code>, setting the "if" condition to <code>${foo}_x</code> will mean that the task will only execute if property <code>bar_x</code> is set.
Sets the "unless" condition to test on execution. This is the name of a property to test for existence - if the property is set, the task will not execute. The property goes through property substitution once before testing, so if property <code>foo</code> has value <code>bar</code>, setting the "unless" condition to <code>${foo}_x</code> will mean that the task will only execute if property <code>bar_x</code> isn't set.
Executes the target if the "if" and "unless" conditions are satisfied. Dependency checking should be done before calling this method, as it does no checking of its own. If either the "if" or "unless" test prevents this target from being executed, a verbose message is logged giving the reason. It is recommended that clients of this class call performTasks rather than this method so that appropriate build events are fired.
Performs the tasks within this target (if the conditions are met), firing target started/target finished messages around a call to execute.
Replaces all occurrences of the given task in the list of children with the replacement data type wrapper.
Replaces all occurrences of the given task in the list of children with the replacement task.
Force the task to be reconfigured from its RuntimeConfigurable.
Handles output by logging it with the INFO priority.
Handles output by logging it with the INFO priority.
Handles an error output by logging it with the WARN priority.
Handles an error line by logging it with the WARN priority.
Logs a message with the default (INFO) priority.
Logs a message with the given priority. This delegates the actual logging to the project.
Logs a message with the given priority. This delegates the actual logging to the project.
Logs a message with the given priority. This delegates the actual logging to the project.
Performs this task if it's still valid, or gets a replacement version and performs that otherwise. Performing a task consists of firing a task started event, configuring the task, executing it, and then firing task finished event. If a runtime exception is thrown, the task finished event is still fired, but with the exception as the cause.
Creates an UnknownElement that can be used to replace this task. Once this has been created once, it is cached and returned by future calls.
Recursively adds an UnknownElement instance for each child element of replacement.
Bind a task to another; use this when configuring a newly created task to do work on behalf of another. Project, OwningTarget, TaskName, Location and Description are all copied Important: this method does not call  {@link Task#init()}. If you are creating a task to delegate work to, call  {@link Task#init()}to initialize it.
Constructor for given proxy. So you could write easier code <pre> myTaskContainer.addTask( new TaskAdapter(myProxy) ); </pre>
Check if the proxy class is a valid class to use with this adapter. The class must have a public no-arg "execute()" method.
Asserts that a condition is true.
Registers an error.
Checks if there are any collected errors and throws a BuildException with all messages if there was one or more.
Creates the real object instance and child elements, then configures the attributes and text of the real object. This unknown element is then replaced with the real object in the containing target's list of children.
Configure the given object from this UnknownElement
Handles output sent to System.out by this task or its real task.
Handles output sent to System.out by this task or its real task.
Handles error output sent to System.err by this task or its real task.
Handles error output sent to System.err by this task or its real task.
Adds a child element to this element.
Creates child elements, creates children of the children (recursively), and sets attributes of the child elements.
This is used then the realobject of the UE is a PreSetDefinition. This is also used when a presetdef is used on a presetdef The attributes, elements and text are applied to this UE.
Creates a named task or data type. If the real object is a task, it is configured up to the init() stage.
Creates a named task and configures it up to the init() stage.
Returns a very verbose exception for when a task/data type cannot be found.
Try to create a nested element of <code>parent</code> for the given tag.
like contents equals, but ignores project
Make a copy of the unknown element and set it in the new project.
Fired when the build starts, this builds the top-level element for the document and remembers the time of the start of the build.
Fired when the build finishes, this adds the time taken and any error stacktrace to the build element and writes the document to disk.
Returns the stack of timed elements for the current thread.
Fired when a target starts building, this pushes a timed element for the target onto the stack of elements for the current thread, remembering the current time and the name of the target.
Fired when a target finishes building, this adds the time taken and any error stacktrace to the appropriate target element in the log.
Fired when a task starts building, this pushes a timed element for the task onto the stack of elements for the current thread, remembering the current time and the name of the task.
Fired when a task finishes building, this adds the time taken and any error stacktrace to the appropriate task element in the log.
Get the TimedElement associated with a task. Where the task is not found directly, search for unknown elements which may be hiding the real task
Fired when a message is logged, this adds a message element to the most appropriate parent element (task, target or build) and records the priority and text of the message.
Adapt fallbackSort to the expected interface of the rest of the code, in particular deal with the fact that block starts at offset 1 (in libbzip2 1.0.6 it starts at 0).
swaps two intervals starting at yyp1 and yyp2 of length yyn inside fmap.
This is the most hammered method of this class. <p> This is the version using unrolled loops. Normally I never use such ones in Java code. The unrolling has shown a noticeable performance improvement on JRE 1.4.2 (Linux i586 / HotSpot Client). Of course it depends on the JIT compiler of the vm. </p>
Method "mainQSort3", file "blocksort.c", BZip2 1.0.2
Constructs a new CBZip2InputStream which decompresses bytes read from the specified stream. <p>Although BZip2 headers are marked with the magic <tt>"Bz"</tt> this constructor expects the next byte in the stream to be the first one after the magic.  Thus callers have to skip the first two bytes. Otherwise this constructor will throw an exception. </p>
Called by recvDecodingTables() exclusively.
This method is accessible by subclasses for historical purposes. If you don't know what it does then you don't need it.
Constructs a new <tt>CBZip2OutputStream</tt> with specified blocksize. <p> <b>Attention: </b>The caller is responsible to write the two BZip2 magic bytes <tt>"BZ"</tt> to the specified stream prior to calling this constructor. </p>
{@inheritDoc} 
Writes the current byte to the buffer, run-length encoding it if it has been repeated at least four times (the first step RLEs sequences of four identical bytes). <p>Flushes the current block before writing data if it is full.</p> <p>"write to the buffer" means adding to data.buffer starting two steps "after" this.last - initially starting at index 1 (not 0) - and updating this.last to point to the last index written minus 1.</p>
Overridden to close the stream.
Constructs a new MailMessage to send an email. Use the given host and port as the mail server.
Sets the from address.  Also sets the "From" header.  This method should be called only once.
Sets the replyto address This method may be called multiple times.
Sets the to address.  Also sets the "To" header.  This method may be called multiple times.
Sets the cc address.  Also sets the "Cc" header.  This method may be called multiple times.
Sets the bcc address.  Does NOT set any header since it's a *blind* copy. This method may be called multiple times.
Sets the subject of the mail message.  Actually sets the "Subject" header.
Sets the named header to the given value.  RFC 822 provides the rules for what text may constitute a header name and value.
Returns a PrintStream that can be used to write the body of the message. A stream is used since email bodies are byte-oriented.  A writer can be wrapped on top if necessary for internationalization. This is actually done in Message.java
Read until the server indicates that the response is complete.
Closes the underlying stream.
Append the text from this line of the resonse.
Construct an entry from an archive's header bytes. File is set to null.
Skip over a record on the input stream.
Read a record from the input stream and return the data.
Write an archive record to the archive.
Write an archive record to the archive, where the record may be inside of a larger array buffer. The buffer must be "offset plus record size" long.
Write a TarBuffer block to the archive.
Flush the current data block if it has any data in it.
Close the TarBuffer. If this is an output buffer, also flush the current block before closing.
Construct an empty entry and prepares the header values.
Construct an entry with only a name. This allows the programmer to construct the entry's header "by hand". File is set to null.
Construct an entry from an archive's header bytes. File is set to null.
Construct an entry from an archive's header bytes. File is set to null.
Set this entry's user id.
Set this entry's group id.
Convenience method to set this entry's group and user ids.
Convenience method to set this entry's group and user names.
If this entry represents a file, and the file is a directory, return an array of TarEntries for this entry's children.
Write an entry's header information to a header buffer.
Parse an entry's header information from a header buffer.
Strips Windows' drive letter as well as any leading slashes, turns path separators into forward slahes.
Check if buffer contents matches Ascii String.
Constructor for TarInputStream.
Sets the debugging flag.
Closes this stream. Calls the TarBuffer's close() method.
Get the next entry in this tar archive. This will skip over any remaining data in the current entry, if there is one, and place the input stream at the header of the next entry, and read the header and instantiate a new TarEntry from the header bytes and return that entry. If there are no more entries in the archive, null will be returned to indicate that the end of the archive has been reached.
Get the next entry in this tar archive as longname data.
Get the next record in this tar archive. This will skip over any remaining data in the current entry, if there is one, and place the input stream at the header of the next entry. If there are no more entries in the archive, null will be returned to indicate that the end of the archive has been reached.
Reads bytes from the current tar archive entry. This method is aware of the boundaries of the current entry in the archive and will deal with them as if they were this stream's start and EOF.
Copies the contents of the current tar archive entry directly into an output stream.
Constructor for TarInputStream.
Sets the debugging flag in this stream's TarBuffer.
Ends the TAR archive without closing the underlying OutputStream. An archive consists of a series of file entries terminated by an end-of-archive entry, which consists of two 512 blocks of zero bytes. POSIX.1 requires two EOF records, like some other implementations.
Ends the TAR archive and closes the underlying OutputStream. This means that finish() is called followed by calling the TarBuffer's close().
Put an entry on the output stream. This writes the entry's header record and positions the output stream for writing the contents of the entry. Once this method is called, the stream is ready for calls to write() to write the entry's contents. Once the contents are written, closeEntry() <B>MUST</B> be called to ensure that all buffered data is completely written to the output stream.
Close an entry. This method MUST be called for all file entries that contain data. The reason is that we must buffer data written to the stream in order to satisfy the buffer's record based writes. Thus, there may be data fragments still being assembled that must be written to the output stream before this entry is closed and the next entry written.
Writes a byte to the current tar archive entry. This method simply calls read( byte[], int, int ).
Writes bytes to the current tar archive entry. This method simply calls write( byte[], int, int ).
Writes bytes to the current tar archive entry. This method is aware of the current entry and will throw an exception if you attempt to write bytes past the length specified for the current entry. The method is also (painfully) aware of the record buffering required by TarBuffer, and manages buffers that are not a multiple of recordsize in length, including assembling records from small buffers.
Writes a PAX extended header with the given map as contents.
Write an EOF (end of archive) record to the tar archive. An EOF record consists of a record of all zeros.
Handles long file or link names according to the longFileMode setting. <p>I.e. if the given name is too long to be written to a plain tar header then <ul> <li>it creates a pax header who's name is given by the paxHeaderName parameter if longFileMode is POSIX</li> <li>it creates a GNU longlink entry who's type is given by the linkType parameter if longFileMode is GNU</li> <li>it throws an exception if longFileMode is ERROR</li> <li>it truncates the name if longFileMode is TRUNCATE</li> </ul></p>
Parse an entry name from a buffer. Parsing stops when a NUL is found or the buffer length is reached.
Copy a name into a buffer. Copies characters from the name into the buffer starting at the specified offset. If the buffer is longer than the name, the buffer is filled with trailing NULs. If the name is longer than the buffer, the output is truncated.
Write an octal integer into a buffer. Uses  {@link #formatUnsignedOctalString} to formatthe value as an octal string with leading zeros. The converted number is followed by space and NUL
Write an octal long integer into a buffer. Uses  {@link #formatUnsignedOctalString} to formatthe value as an octal string with leading zeros. The converted number is followed by a space.
Write an long integer into a buffer as an octal string if this will fit, or as a binary number otherwise. Uses  {@link #formatUnsignedOctalString} to formatthe value as an octal string with leading zeros. The converted number is followed by a space.
Writes an octal value into a buffer. Uses  {@link #formatUnsignedOctalString} to formatthe value as an octal string with leading zeros. The converted number is followed by NUL and then space.
Assemble as unicode extension from the name/comment and encoding of the original zip entry.
{@inheritDoc} 
{@inheritDoc} 
{@inheritDoc} 
The actual data to put into local file data - without Header-ID or length specifier.
Populate data from this array as if it was in local file data.
Create an instance of the appropriate ExtraField, falls back to {@link UnrecognizedExtraField UnrecognizedExtraField}.
Split the array into ExtraFields and populate them with the given data.
Merges the local file data fields of the given ZipExtraFields.
Merges the central directory fields of the given ZipExtraFields.
whether the current entry will be encrypted  using strong encryption
Encodes the set bits in a form suitable for ZIP archives.
Encodes the set bits in a form suitable for ZIP archives.
Parses the supported flags from the given archive data.
Pushes the encoded form of the given character to the given byte buffer.
Populate data from this array as if it was in local file data.
Populate data from this array as if it was in central directory data.
Set the extra field data in the local file data - without Header-ID or length specifier.
Set the extra field data in central directory.
{@inheritDoc} 
{@inheritDoc} 
{@inheritDoc} 
Create instance from the eight bytes starting at offset.
Get value as eight bytes in big endian byte order.
Helper method to get the value as a Java BigInteger from eight bytes starting at given array offset
Grow a byte buffer, so it has a minimal capacity or at least the double capacity of the original buffer
Append <code>%Uxxxx</code> to the given byte buffer. The caller must assure, that <code>bb.remaining()&gt;=6</code>.
Instantiates a zip encoding.
Creates a new zip entry with the specified name. <p>Assumes the entry represents a directory if and only if the name ends with a forward slash "/".</p>
Creates a new zip entry with fields taken from the specified zip entry. <p>Assumes the entry represents a directory if and only if the name ends with a forward slash "/".</p>
Creates a new zip entry with fields taken from the specified zip entry. <p>Assumes the entry represents a directory if and only if the name ends with a forward slash "/".</p>
Creates a new zip entry taking some information from the given file and using the provided name. <p>The name will be adjusted to end with a forward slash "/" if the file is a directory.  If the file is not a directory a potential trailing forward slash will be stripped from the entry name.</p>
Overwrite clone.
Sets Unix permissions in a way that is understood by Info-Zip's unzip command.
Replaces all currently attached extra fields with the new array.
Adds an extra field - replacing an already present extra field of the same type. <p>If no extra field of the same type exists, the field will be added as last field.</p>
Adds an extra field - replacing an already present extra field of the same type. <p>The new extra field will be the first one.</p>
Remove an extra field.
Removes unparseable extra field data.
Retrieves the extra data for the local file data.
Make this class work in JDK 1.1 like a 1.2 class. <p>This either stores the size for later usage or invokes setCompressedSize via reflection.</p>
Sets the name using the raw bytes and the string created from it by guessing or using the configured encoding.
Returns the raw bytes that made up the name before it has been converted using the configured or guessed encoding. <p>This method will return null if this instance has not been read from an archive.</p>
If there are no extra fields, use the given fields as new extra data - otherwise merge the fields assuming the existing fields and the new fields stem from different locations inside the archive.
Opens the given file for reading, assuming the specified encoding for file names.
Closes the archive.
Returns all entries in physical order. <p>Entries will be returned in the same order their contents appear within the archive.</p>
Returns a named entry - or  {@code null} if no entry bythat name exists. <p>If multiple entries with the same name exist the first entry in the archive's central directory by that name is returned.</p>
Returns all named entries in the same order they appear within the archive's central directory.
Returns all named entries in the same order their contents appear within the archive.
Returns an InputStream for reading the contents of the given entry.
Reads the central directory of the given archive and populates the internal tables with ZipEntry instances. <p>The ZipEntrys will know all data that can be obtained from the central directory alone, but not the data that requires the local file header or additional data to be read.</p>
Reads an individual entry of the central directory, creats an ZipEntry from it and adds it to the global maps.
If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>
Searches for either the &quot;Zip64 end of central directory locator&quot; or the &quot;End of central dir record&quot;, parses it and positions the stream at the first central directory record.
Parses the &quot;Zip64 end of central directory locator&quot;, finds the &quot;Zip64 end of central directory record&quot; using the parsed information, parses that and positions the stream at the first central directory record.
Searches for the &quot;End of central dir record&quot;, parses it and positions the stream at the first central directory record.
Searches for the and positions the stream at the start of the &quot;End of central dir record&quot;.
Searches the archive backwards from minDistance to maxDistance for the given signature, positions the RandomaccessFile right at the signature if it has been found.
Walks through all recorded entries and adds the data available from the local file header. <p>Also records the offsets for the data to read from the entries.</p>
Checks whether the archive starts with a LFH.  If it doesn't, it may be an empty archive.
Create instance from the four bytes starting at offset.
Get value as four bytes in big endian byte order.
Creates a new ZIP OutputStream writing to a File.  Will use random access if possible.
The encoding to use for filenames and the file comment. <p>For a list of possible values see <a href="http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html">http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html</a>. Defaults to the platform's default character encoding.</p>
{@inheritDoc}
Writes all necessary data for this entry.
Ensures all bytes sent to the deflater are written to the stream.
Ensures the current entry's size and CRC information is set to the values just written, verifies it isn't too big in the Zip64Mode.Never case and returns whether the entry would require a Zip64 extra field.
Ensures the current entry's size and CRC information is set to the values just written, verifies it isn't too big in the Zip64Mode.Never case and returns whether the entry would require a Zip64 extra field.
When using random access output, write the local file header and potentiall the ZIP64 extra containing the correct CRC and compressed/uncompressed sizes.
{@inheritDoc}
Provides default values for compression method and last modification time.
Throws an exception if the size is unknown for a stored entry that is written to a non-seekable output or the entry is too big to be written without Zip64 extra but the mode has been set to Never.
Writes bytes to ZIP entry.
Write bytes to output or random access file.
Closes this output stream and releases any system resources associated with the stream.
Flushes this output stream and forces any buffered output bytes to be written out to the stream.
Writes next block of compressed data to the output stream.
Writes the local file header entry
Adds UnicodeExtra fields for name and file comment if mode is ALWAYS or the data cannot be encoded using the configured encoding.
Writes the data descriptor entry.
Writes the central file header entry.
Writes the central file header entry.
If the entry needs Zip64 extra information inside the central directory then configure its data.
Writes the &quot;End of central dir record&quot;.
Writes the &quot;ZIP64 End of central dir record&quot; and &quot;ZIP64 End of central dir locator&quot;.
Write bytes to output or random access file.
Write bytes to output or random access file.
Get the existing ZIP64 extended information extra field or create a new one and add it to the entry.
Closes the underlying stream/file without finishing the archive, the result will likely be a corrupt archive. <p>This method only exists to support tests that generate corrupt archives so they can clean up any temporary files.</p>
Create instance from the two bytes starting at offset.
Get value as two bytes in big endian byte order.
Get value as two bytes in big endian byte order.
Convert a Date object to a DOS date/time field. <p>Stolen from InfoZip's <code>fileio.c</code></p>
Convert a Date object to a DOS date/time field. <p>Stolen from InfoZip's <code>fileio.c</code></p>
Convert a DOS date/time field to a Date object.
Converts DOS time to Java time (number of milliseconds since epoch).
If the entry has Unicode*ExtraFields and the CRCs of the names/comments match those of the extra fields, transfer the known Unicode values from the extra field.
If the stored CRC matches the one of the given name, return the Unicode name of the given field. <p>If the field is null or the CRCs don't match, return null instead.</p>
Create a copy of the given array - or return null if the argument is null.
Get all the attributes in the ant-attribute:param namespace and place them in a map.
Determines and Executes the action method for the task.
Constructor used by Ant's introspection mechanism. The original filter reader is only used for chaining purposes, never for filtering purposes (and indeed it would be useless for filtering purposes, as it has no real data to filter). ChainedReaderHelper uses this placeholder instance to create a chain of real filters.
Reads a line of text ending with '\n' (or until the end of the stream). The returned String retains the '\n'.
Sets the parameters used by this filter, and sets the filter to an uninitialized status.
Creates a new ClassConstants using the passed in Reader for instantiation.
Returns the next character in the filtered stream. If the desired number of lines have already been read, the resulting stream is effectively at an end. Otherwise, the next character from the underlying stream is read and returned.
Creates a new ConcatReader using the passed in Reader for instantiation.
Scans the parameters list for the "lines" parameter and uses it to set the number of lines to be returned in the filtered stream. also scan for skip parameter.
Returns the next character in the filtered stream, converting non latin characters to unicode escapes.
Creates a new EscapeUnicode using the passed in Reader for instantiation.
Creates a new ExpandProperties filter using the passed in Reader for instantiation.
Return the next character in the filtered stream.
Specify how DOS EOF (control-z) characters are to be handled.
Specify how end of line (EOL) characters are to be handled.
Specify how tab characters are to be handled.
Creates a new filtered reader.
Returns the next character in the filtered stream. If the desired number of lines have already been read, the resulting stream is effectively at an end. Otherwise, the next character from the underlying stream is read and returned.
Creates a new HeadFilter using the passed in Reader for instantiation.
Scans the parameters list for the "lines" parameter and uses it to set the number of lines to be returned in the filtered stream. also scan for skip parameter.
Returns the next character in the filtered stream, only including lines from the original stream which contain all of the specified words.
Adds a <code>contains</code> element.
Creates a new LineContains using the passed in Reader for instantiation.
Parses the parameters to add user-defined contains strings.
Returns the next character in the filtered stream, only including lines from the original stream which match all of the specified regular expressions.
Adds a <code>regexp</code> element.
Creates a new LineContainsRegExp using the passed in Reader for instantiation.
Whether to match casesensitevly.
Parses parameters to add user defined regular expressions.
Returns the next character in the filtered stream. One line is read from the original input, and the prefix added. The resulting line is then used until it ends, at which point the next original line is read, etc.
Creates a new PrefixLines filter using the passed in Reader for instantiation.
Initializes the prefix if it is available from the parameters.
Returns the next character in the filtered stream, replacing tokens from the original stream.
A resource containing properties, each of which is interpreted as a token/value pair.
Adds a token element to the map of tokens to replace.
Returns properties from a specified properties file.
Creates a new ReplaceTokens using the passed in Reader for instantiation.
Initializes tokens and loads the replacee-replacer hashtable.
Returns the next character in the filtered stream. If the desired number of lines have already been read, the resulting stream is effectively at an end. Otherwise, the next character from the underlying stream is read and returned.
Creates a new SortReader using the passed in Reader for instantiation.
Set the comparator to be used as sorting criterion as nested element.
Scans the parameters list
Creates a new StripJavaComments using the passed in Reader for instantiation.
Returns the next character in the filtered stream, only including characters not in the set of line-breaking characters.
Creates a new StripLineBreaks using the passed in Reader for instantiation.
Parses the parameters to set the line-breaking characters.
Returns the next character in the filtered stream, only including lines from the original stream which don't start with any of the specified comment prefixes.
Adds a <code>comment</code> element to the list of prefixes.
Creates a new StripLineComments using the passed in Reader for instantiation.
Parses the parameters to set the comment prefixes.
Returns the next character in the filtered stream. One line is read from the original input, and the suffix added. The resulting line is then used until it ends, at which point the next original line is read, etc.
Creates a new SuffixLines filter using the passed in Reader for instantiation.
Initializes the suffix if it is available from the parameters.
Returns the next character in the filtered stream, converting tabs to the specified number of spaces.
Creates a new TabsToSpaces using the passed in Reader for instantiation.
Parses the parameters to set the tab length.
Creates a new filtered reader.
Returns the next character in the filtered stream. If the read-ahead has been completed, the next character in the buffer is returned. Otherwise, the stream is read to the end and buffered (with the buffer growing as necessary), then the appropriate position in the buffer is set to read from.
Creates a new TailFilter using the passed in Reader for instantiation.
Scans the parameters list for the "lines" parameter and uses it to set the number of lines to be returned in the filtered stream. also scan for "skip" parameter.
Returns the next character in the filtered stream, only including lines from the original stream which match all of the specified regular expressions.
Creates a new TokenFilter using the passed in Reader for instantiation.
add a line tokenizer - this is the default.
add a string tokenizer
add a file tokenizer
replace string filter
contains string filter
replace regex filter
contains regex filter
trim filter
ignore blank filter
delete chars
Add an arbitrary filter
constructor
sets the build file to which the XML context belongs
sets the build file to which the XML context belongs
add a runtime configurable wrapper to the internal stack
remove a runtime configurable wrapper from the stack
add a new target
Scans an attribute list for the <code>id</code> attribute and stores a reference to the target object in the project if an id is found. <p> This method was moved out of the configure method to allow it to be executed at parse time.
Called during parsing, stores the prefix to uri mapping.
End of prefix to uri mapping.
prefix to namespace uri mapping
{@inheritDoc}. 
{@inheritDoc}. 
Parse the given URL as an antlib descriptor and return the content as something that can be turned into an Antlib task. <p>simply delegates to  {@link #parseUnknownElement parseUnknownElement} if the resource provides an URL and throwsan exception otherwise.</p>
Parse an unknown element from a url
Parse a source xml input.
Parses the project file, configuring the project as it goes.
default constructor
Parses the project file, configuring the project as it goes.
Scans an attribute list for the <code>id</code> attribute and stores a reference to the target object in the project if an id is found. <p> This method was moved out of the configure method to allow it to be executed at parse time.
{@inheritDoc}. 
Prompts and requests input.  May loop until a valid input has been entered.
Constructs user prompt from a request. <p>This implementation adds (choice1,choice2,choice3,...) to the prompt for <code>MultipleChoiceInputRequest</code>s.</p>
Prompts and requests input.
Picks up the input from a property, using the prompt as the name of the property.
Entry point for starting command line Ant.
Add a CLASSPATH or -lib to lib path urls. Only filesystem resources are supported.
Run the launcher to launch Ant.
Get the list of -lib entries and -cp entry into a URL array.
Get the jar files in ANT_HOME/lib. determine ant library directory for system jars: use property or default using location of ant-launcher.jar
Get the jar files in user.home/.ant/lib
Combine the various jar sources into a single array of jars.
set a system property, optionally log what is going on
Find the directory or jar a given resource has been loaded from.
Crack a JAR URI. This method is public for testing; we may delete it without any warning -it is not part of Ant's stable API.
Decodes an Uri with % characters. The URI is escaped
Encodes an Uri with % characters. The URI is escaped
Get the File necessary to load the Sun compiler tools. If the classes are available to this class, then no additional URL is required and null is returned. This may be because the classes are explicitly in the class path or provided by the JVM directly.
Get an array of URLs representing all of the files of a given set of extensions in the given location. If the location is a file, it is returned as the only element of the array. If the location is a directory, it is scanned for matching files.
Set the colors to use from a property file specified by the special ant property ant.logger.defaults
{@inheritDoc}. 
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} 
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
Construct the listener and make sure there is a valid appender.
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
Sends an e-mail with the log results.
Receives and buffers log messages.
Send the mail
Send the mail  (MimeMail)
Logs a message to say that the target has started.
Logs a message to say that the target has finished.
Logs a message to say that the task has started.
Logs a message to say that the task has finished.
Get a localproperties for the given project.
Add a local property to the current scope.
enter the scope 
exit the scope 
Copy the stack for a parallel thread. To be called from the parallel thread itself.
Set a *new" property.
Set a property.
Decode properties from a String representation. <ul> <li>This implementation starts parsing the <code>value</code> parameter (unsurprisingly) at the beginning and asks each {@link PropertyExpander PropertyExpander} whether there is aproperty reference at that point.  PropertyExpanders return the name of a property they may find and may advance the parse position.</li> <li>If the PropertyExpander returns <code>null</code> the method continues with the next PropertyExpander, otherwise it tries to look up the property's value using the configured {@link GetProperty GetProperty} instance.</li><li>Once all PropertyExpanders have been consulted, the parse position is advanced by one character and the process repeated until <code>value</code> is exhausted.</li> </ul> <p>If the entire contents of <code>value</code> resolves to a single property, the looked up property value is returned. Otherwise a String is returned that concatenates the non-property parts of <code>value</code> and the expanded values of the properties that have been found.</p>
Learn whether a String contains replaceable properties. <p>Uses the configured  {@link PropertyExpander PropertyExpanders} and scans through the string.  Returns trueas soon as any expander finds a property.</p>
Return any property that can be parsed from the specified position in the specified String. <p>Uses the configured  {@link PropertyExpander PropertyExpanders} and {@link GetProperty GetProperty}instance .</p>
The action method - resolves all the properties in a map.
The action method - resolves all the properties in a map.
find the handler and instantiate it if it does not exist yet
Sets up the environment for toExecute and then runs it.
do the work
Removes the cvs password from the command line, if given on the command line. This password can be given on the command line in the cvsRoot -d:pserver:user:password@server:path It has to be noted that the password may be omitted altogether.
The tag of the package/module to operate upon.
This needs to be public to allow configuration of commands externally.
This method adds a command line argument to an external command. I do not understand what this method does in this class ??? particularly not why it is public ???? AntoineLL July 23d 2003
Use the most recent revision no later than the given date.
Configure a commandline element for things like cvsRoot, quiet, etc.
remove a particular command from a vector of command lines
Adds direct command-line to execute.
Configures and adds the given Commandline.
If true, this is the same as compressionlevel="3".
add a named module/package.
Adds a set of files to sign
Add a system property.
Create the redirector to use, if any.
these are options common to signing and verifying
bind to a keystore if the attributes are there
create the jarsigner executable task
clone our filesets vector, and patch in the jar attribute as a new fileset, if is defined
clone our path and add all explicitly specified FileSets as well, patch in the jar attribute as a new fileset if it is defined.
add a value argument to a command
create a task bound to its creator
Creates a Project instance for the project to call.
Called in execute or createProperty (via getNewProject()) if newProject is null. <p>This can happen if the same instance of this task is run twice as newProject is set to null at the end of execute (to save memory and help the GC).</p> <p>calls init() again</p>
Attaches the build listeners of the current project to the new project, configures a possible logfile, transfers task and data-type definitions, transfers properties (either all or just the ones specified as user properties to the current project, depending on inheritall), transfers the input handler.
Handles output. Send it the the new project if is present, otherwise call the super class.
Handles output. Send it the the new project if is present, otherwise call the super class.
Handle error output. Send it the the new project if is present, otherwise call the super class.
Handle error output. Send it the the new project if is present, otherwise call the super class.
Do the execution.
Override the properties in the new project with the one explicitly defined as nested elements here.
Add the references explicitly defined as nested elements to the new project.  Also copy over all references that don't override existing references in the new project if inheritrefs has been requested.
Try to clone and reconfigure the object referenced by oldkey in the parent project and add it to the new project with the key newkey. <p>If we cannot clone it, copy the referenced object itself and keep our fingers crossed.</p>
Copies all properties from the given table to the new project - omitting those that have already been set in the new project as well as properties named basedir or ant.file.
The target of the new Ant project to execute. Defaults to the new project's default target.
Property to pass to the new project. The property is passed as a 'user property'.
Add a Reference element identifying a data type to carry over to the new project.
Add a target to this Ant invocation.
Add a set of properties to pass to the new project.
Get the (sub)-Project instance currently in use.
Static method to read an ant lib definition from a url.
add a task to the list of tasks
Execute the nested tasks, setting the classloader for any tasks that derive from Definer.
Build the antstructure DTD.
Run the definition. This registers the XML namespace (URI) as a namepace for attributes.
{@inheritDoc}
Overridden to restore the wrapper once it is no longer needed.
Needed if two different targets reuse the same instance.
Set the classpath to be used when searching for classes and resources.
Set the classpath by reference.
Set the path to use when looking for a file.
Set the value to be given to the property if the desired resource is available.
Set the file which must be present in the file system to set the given property.
Check if a given file exists and matches the required type.
Check if a given resource can be loaded.
do the work
Run task.
Utility method to retrieve build number from properties object.
Utility method to load properties from file.
Do the unbzipping.
Compress the zipFile.
Initialize this task by creating new instance of the ant task and configuring it by calling its own init method.
Delegate the work to the ant task instance, after setting it up.
Create a new Property to pass to the invoked target(s).
Reference element identifying a data type to carry over to the invoked target.
Set of properties to pass to the new project.
Set target to execute.
Add a target to the list of targets to invoke.
Handles output. Send it the the new project if is present, otherwise call the super class.
Handles output. Send it the the new project if is present, otherwise call the super class.
Handle error output. Send it the the new project if is present, otherwise call the super class.
Handle error output. Send it the the new project if is present, otherwise call the super class.
Select the in/output pattern via a well know format name.
Files to generate checksums for.
Add a resource collection.
Calculate the checksum(s).
Generate checksum(s) using the message digest created earlier.
Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The returned array will be half the length of the passed array, as it takes two characters to represent any given byte. An exception is thrown if the passed char array has an odd number of elements. NOTE: This code is copied from jakarta-commons codec.
reads the checksum from a file using the specified format.
Set the project of this task. Calls the super class and sets the project on dhe default FileSet.
The file or single directory of which the permissions must be changed.
The directory which holds the files whose permissions must be changed.
Set the new permissions.
Sets the set of include patterns. Patterns may be separated by a comma or a space.
Sets the set of exclude patterns. Patterns may be separated by a comma or a space.
Sets whether default exclusions should be used or not.
Check the attributes and nested elements.
Default constructor. Creates a new Componentdef instance. Sets the restrict attribute to true.
Construct a new Concat task.
Sets the destination file, or uses the console if not specified.
Force overwrite existing destination file
Path of files to concatenate.
Set of files to concatenate.
List of files to concatenate.
Add an arbitrary ResourceCollection.
Adds a FilterChain.
This method adds text which appears in the 'concat' element.
Specify the end of line to find and to add if not present at end of each input file. This attribute is used in conjunction with fixlastline.
Execute the concat task.
Implement ResourceCollection.
Validate configuration options.
Get the resources to concatenate.
The value for the property to set, if condition evaluates to true. Defaults to "true".
The value for the property to set, if condition evaluates to false. If this attribute is not specified, the property will not be set.
See whether our nested condition holds and set the property.
Copy task constructor.
Add a FilterChain.
Add a filterset.
Give the copied files the same last modified time as the original files.
Add a set of files to copy.
Add a collection of files to copy.
Add a nested filenamemapper.
Perform the copy operation.
Compares source files to destination files to see if they should be copied.
Add to a map of files/directories to copy.
Create a map of resources to copy.
Actually does the file (and possibly empty directory) copies. This is a good method for subclasses to override.
Actually does the resource copies. This is a good method for subclasses to override.
Adds the given strings to a list contained in the given map. The file is the key into the map.
Adds the given string to a list contained in the given map. The file is the key into the map.
returns the mapper to use based on nested elements or the flatten attribute.
Returns a reason for failure based on the exception thrown. If the exception is not IOException output the class name, output the message if the exception is MalformedInput add a little note.
Execute the task.
The filtering attribute. Default  is false.
Execute the task.
Set the path to be used when running the Java class.
Set the path to use by reference.
This is a very minimal derivative of the normal copy logic.
Does the work.
Does the work.
Set the classpath to be used when searching for component being defined.
Set a reference to a classpath to use when loading the files. To actually share the same loader, set loaderref as well
Use the reference to locate the loader. If the loader is not found, the specified classpath will be used and registered with the specified name. This allows multiple taskdef/typedef to use the same class loader, so they can be used together, eliminating the need to put them in the CLASSPATH.
create a classloader for this definition
What to do if there is an error in loading the class. <ul> <li>error - throw build exception</li> <li>report - output at warning level</li> <li>ignore - output at debug level</li> </ul>
Sets the format of the file or resource
Run the definition.
This is where the logic to map from a URI to an antlib resource is kept.
Load type definitions as properties from a URL.
Name of the property file  to load ant name/classname pairs from.
Name of the property resource to load ant name/classname pairs from.
Antlib attribute, sets resource and uri. uri is set the antlib value and, resource is set to the antlib.xml resource in the classpath. For example antlib="antlib:org.acme.bland.cola" corresponds to uri="antlib:org.acme.bland.cola" resource="org/acme/bland/cola/antlib.xml". ASF Bugzilla Bug 31999
Name of the definition
Add a definition using the attributes of Definer
Set the directory from which files are to be deleted
Adds a set of files to be deleted.
Add an arbitrary ResourceCollection to be deleted.
Delete the file(s).
Delete a directory
remove an array of files in a directory, and a list of subdirectories which will only be deleted if 'includeEmpty' is true
Do the work.
Add a set of source files.
Add a list of source files.
Add a set of target files.
Add a list of target files.
Execute the task.
Execute the task. This delegates to the Diagnostics class.
Set the destination file.
File to incorporate as application.xml.
Adds zipfileset.
File to write to.
Resource to write to.
Set a multiline message.
Set the logging level. Level should be one of <ul> <li>error</li> <li>warning</li> <li>info</li> <li>verbose</li> <li>debug</li> </ul> <p>The default is &quot;warning&quot; to ensure that messages are displayed by default when using the -quiet command line option.</p>
Execute the task.
Constructor for Exec. Prints a warning message to std error.
Execute the task.
Execute the command.
Set the directory.
Log an output message.
Close output.
create an instance that is helping another task. Project, OwningTarget, TaskName and description are all pulled out
Set the timeout in milliseconds after which the process will be killed.
Set the name of the executable program.
Sets a command line.
Controls whether error output of exec is logged. This is only useful when output is being redirected and error output is desired in the Ant log.
Sets the property name whose value should be set to the output of the process.
Sets the name of the property whose value should be set to the error of the process.
Add an environment variable to the launched process.
Helper method to set result property to the passed in value if appropriate.
Set whether output should be appended to or overwrite an existing file. Defaults to false.
Restrict this execution to a single OS Family
The method attempts to figure out where the executable is so that we can feed the full path. We first try basedir, then the exec dir, and then fallback to the straight executable name (i.e. on the path).
Do the work.
Has the user set all necessary attributes?
Set up properties on the redirector that we needed to store locally.
Is this the OS the user wanted?
Create an Execute instance with the correct working directory set.
A Utility method for this classes and subclasses to run an Execute instance (an external command).
Run the command using the given Execute instance. This may be overridden by subclasses.
Find the list of environment variables for this process.
Creates a new execute object.
Creates a process that runs a command.
Runs a process defined by the command line and returns its exit status.
Starts a process defined by the command line. Ant will not wait for this process, nor log its output.
Patch the current environment with the new values from the user.
Close the streams belonging to the given Process.
This method is VMS specific and used by getEnvironmentVariables(). Parses VMS logicals from <code>in</code> and returns them as a Map. <code>in</code> is expected to be the output of "SHOW LOGICAL". The method takes care of parsing the output correctly as well as making sure that a logical defined in multiple tables only gets added from the highest order table. Logicals with multiple equivalence names are mapped to a variable with multiple values separated by a comma (,).
Execute the Java class against the specified Ant Project.
Run this ExecuteJava in a Thread.
Mark timeout as having occurred.
Run the Java command in a separate VM, this does not give you the full flexibility of the Java task, but may be enough for simple needs.
On VMS platform, we need to create a special java options file containing the arguments and classpath for the java command. The special file is supported by the "-V" switch on the VMS JVM.
Add a set of files upon which to operate.
Add a set of directories upon which to operate.
Add a list of source files upon which to operate.
Add a collection of resources upon which to operate.
Set whether the command works only on files, directories or both.
Create a placeholder indicating where on the command line the name of the source file should be inserted.
Create a placeholder indicating where on the command line the name of the target file should be inserted.
Add a nested FileNameMapper.
Check the configuration of this ExecuteOn instance.
Set up the I/O Redirector.
log a message for skipping a fileset.
Construct the command line for parallel execution.
Run the command in "parallel" mode, making sure that at most maxParallel sourcefiles get passed on the command line.
Inserts target file names (which are already absolute paths) into the list of arguments, taking prefix and postfix into account.
Creates a new watchdog with a given timeout.
Watches the given process and terminates it, if it runs for too long. All information from the previous run are reset.
Stops the watcher. It will notify all threads possibly waiting on this object.
Only fail if the given expression evaluates to true or the name of an existing property.
Only fail if the given expression evaluates to false or tno property of the given name exists.
Throw a <code>BuildException</code> to exit (fail) the build. If specified, evaluate conditions: A single nested condition is accepted, but requires that the <code>if</code>/<code>unless</code> attributes be omitted. If the nested condition evaluates to true, or the ifCondition is true or unlessCondition is false, the build will exit. The error message is constructed from the text fields, from the nested condition (if specified), or finally from the if and unless parameters (if present).
Set a multiline message.
Do the work.
This method is to be overridden by extending unarchival tasks.
get a mapper for a file
extract a file to a directory
Add a patternset.
Add a fileset
Add a resource collection.
A nested filenamemapper
Sets the encoding to assume for file names and comments. <p>Set to <code>native-encoding</code> if you want your platform's native encoding, defaults to UTF8.</p>
Whether unicode extra fields will be used if present.
Execute the task.
Read the filters.
Set to true if modifying Java source files.
Specify how EndOfLine characters are to be handled.
Specify how carriage return (CR) characters are to be handled.
Specify how tab characters are to be handled.
Specify how DOS EOF (control-z) characters are to be handled.
Specify whether a missing EOL will be added to the final line of a file.
Executes the task.
Execute the task.
Does the work.
make a get request, with the supplied progress and logging info. All the other config parameters are set at the task level, source, dest, ignoreErrors, etc.
make a get request, with the supplied progress and logging info. All the other config parameters like ignoreErrors are set at the task level.
Check the attributes.
Set an URL to get.
Adds URLs to get.
The number of attempts to make for opening the URI, defaults to 3. <p>The name of the method is misleading as a value of 1 means "don't retry on error" and a value of 0 meant don't even try to reach the URI at all.</p>
Add a nested filenamemapper.
Implement the gunzipping.
perform the GZip compression operation.
set the properties.
The resource to import.
Sets a bunch of Thread-local ProjectHelper properties.
Set a multiline message.
Actual method executed by ant.
constructor 
Not used for jar files.
Indicates if a jar file should be created when it would only contain a manifest file. Possible values are: <code>fail</code> (throw an exception and halt the build); <code>skip</code> (do not create any archive, but issue a warning); <code>create</code> (make an archive with only a manifest file). Default is <code>create</code>;
Set the destination file.
Adds a zipfileset to include in the META-INF directory.
Add a path to index jars.
A nested SPI service element.
Initialize the zip output stream.
Finalize the zip output stream. This creates an index list if the index attribute is true.
Create the index list to speed up classloading. This is a JDK 1.3+ specific feature and is enabled by default. See <a href="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#JAR%20Index"> the JAR index specification</a> for more details.
Collect the resources that are newer than the corresponding entries (or missing) in the original archive. <p>If we are going to recreate the archive instead of updating it, all resources should be considered as new, if a single one is.  Because of this, subclasses overriding this method must call <code>super.getResourcesToAdd</code> and indicate with the third arg if they already know that the archive is out-of-date.</p>
Create an empty jar file.
Make sure we don't think we already have a MANIFEST next time this task gets executed.
Check against packaging spec
Writes the directory entries from the first and the filenames from the second list to the given writer, one entry per line.
try to guess the name of the given file. <p>If this jar has a classpath attribute in its manifest, we can assume that it will only require an index of jars listed there.  try to find which classpath entry is most likely the one the given file name points to.</p> <p>In the absence of a classpath attribute, assume the other files will be placed inside the same directory as this jar and use their basename.</p> <p>if there is a classpath and the given file doesn't match any of its entries, return null.</p>
create a bound task
Do the execution.
Check configuration.
Set the classpath to be used when running the Java class.
Set the modulepath to be used when running the Java class.
Set the modulepath to use by reference.
Set the classpath to use by reference.
Set the location of the JAR file to execute.
Set the Java class to execute.
Set the Java module to execute.
Deprecated: use nested arg instead. Set the command line arguments for the class.
If set, system properties will be copied to the cloned VM--as well as the bootclasspath unless you have explicitly specified a bootclasspath. <p>Doesn't have any effect unless fork is true.</p>
Helper method to set result property to the passed in value if appropriate.
Set the command line arguments for the JVM.
Set the command used to start the VM (only if forking).
Add a system property.
Add a set of properties as system properties.
Set whether error output of exec is logged. This is only useful when output is being redirected and error output is desired in the Ant log.
Set the property name whose value should be set to the output of the process.
Set the property name whose value should be set to the error of the process.
Corresponds to -mx or -Xmx depending on VM version.
Set the JVM version.
Add an environment variable. <p>Will be ignored if we are not forking a new VM.
If true, append output to existing file.
Add assertions to enable in this program (if fork=true).
Pass output sent to System.out to specified output file.
Pass output sent to System.out to specified output file.
Handle output sent to System.err.
Handle output sent to System.err and flush the stream.
Set up properties on the redirector that we needed to store locally.
Executes the given classname with the given arguments in a separate VM.
Executes the given classname with the given arguments in a separate VM.
Do all configuration for an executable that is common across the  {@link #fork(String[])} and{@link #spawn(String[])} methods.
Set up our environment variables.
Set the working dir of the new process.
Set the command line for the exe. On VMS, hands off to  {@link #setupCommandLineForVMS(Execute,String[])}.
On VMS platform, we need to create a special java options file containing the arguments and classpath for the java command. The special file is supported by the "-V" switch on the VMS JVM.
Executes the given classname with the given arguments as if it were a command line application.
Clear out the arguments to this java task.
Log the specified Throwable.
Adds a reference to a source path defined elsewhere.
Adds a reference to a modulesourcepath defined elsewhere.
Adds a reference to a classpath defined elsewhere.
Adds a reference to a modulepath defined elsewhere.
Adds a reference to the upgrademodulepath defined elsewhere.
Adds a reference to a classpath defined elsewhere.
If true, includes Ant's own classpath in the classpath.
Adds an implementation specific command-line argument.
Get the additional implementation specific command line arguments.
Scans the directory looking for source files to be compiled. The results are returned in the class variable compileList
Choose the implementation for this particular task.
The implementation for this particular task. <p>Defaults to the build.compiler property but can be overridden via the compiler attribute.</p> <p>This method does not take the fork attribute into account.</p>
Check that all required attributes have been set and nothing silly has been entered.
Perform the compilation.
Resolves the modulesourcepath element possibly containing groups and module marks to module names and source roots.
Expands the groups in the modulesourcepath entry to alternatives. <p> The <code>'*'</code> is a token representing the name of any of the modules in the compilation module set. The <code>'{' ... ',' ... '}'</code> express alternates for expansion. An example of the modulesourcepath entry is <code>src/&#42;/{linux,share}/classes</code> </p>
Resolves the group to alternatives.
Finds modules in the expanded modulesourcepath entry.
Finds modules in the expanded modulesourcepath entry.
Utility method to add an argument to the command line conditionally based on the given flag.
Utility method to add a Javadoc argument.
Set the maximum memory to be used by the javadoc process
Set an additional parameter on the command line
Adds a reference to a CLASSPATH defined elsewhere.
Set the directory where the Javadoc output will be generated.
Set the list of source files to process.
Add a single source file.
Set the package names to be processed.
Add a single package to be processed. If the package name ends with &quot;.*&quot; the Javadoc task will find and process all subpackages.
Set the list of packages to be excluded.
Add a package to be excluded from the Javadoc run.
Specify the file containing the overview to be included in the generated documentation.
Indicate whether only public classes and members are to be included in the scope processed
Indicate whether only protected and public classes and members are to be included in the scope processed
Indicate whether only package, protected and public classes and members are to be included in the scope processed
Indicate whether all classes and members are to be included in the scope processed
Set the scope to be processed. This is an alternative to the use of the setPublic, setPrivate, etc methods. It gives better build file control over what scope is processed.
Set the class that starts the doclet used in generating the documentation.
Set the classpath used to find the doclet class.
Set the classpath used to find the doclet class by reference.
Add a taglet
Indicate whether Javadoc should produce old style (JDK 1.1) documentation. This is not supported by JDK 1.1 and has been phased out in JDK 1.4
Adds a reference to a CLASSPATH defined elsewhere.
Adds a reference to a CLASSPATH defined elsewhere.
Set the location of the extensions directories.
Set the location of the extensions directories.
Run javadoc in verbose mode
Set the local to use in documentation generation.
Set the encoding name of the source files,
Generate the &quot;use&quot; page for each package.
Generate a split index
Set the title to be placed in the HTML &lt;title&gt; tag of the generated documentation.
Set the title of the generated overview page.
Set the header text to be placed at the top of each output file.
Set the footer text to be placed at the bottom of each output file.
Set the text to be placed at the bottom of each output file.
Link to docs at "url" using package list at "url2" - separate the URLs by using a space character.
Create links to Javadoc output at the given URL.
Control deprecation information
Control deprecated list generation
Control class tree generation.
Control generation of index.
Control generation of help link.
Control generation of the navigation bar.
Control warnings about serial tag.
Specifies the CSS stylesheet file to use.
Specifies the HTML help file to use.
Output file encoding name.
Create link to Javadoc output at the given URL.
Creates and adds a -tag argument. This is used to specify custom tags. This argument is only available for Javadoc 1.4, and will generate a verbose message (and then be ignored) when run on Java versions below 1.4.
Separates packages on the overview page into whatever groups you specify, one group per table.
Charset for cross-platform viewing of generated documentation.
Adds a packageset. <p>All included directories will be translated into package names be converting the directory separator into dots.</p>
Adds a fileset. <p>All included files will be added as sourcefiles.  The task will automatically add <code>includes=&quot;**&#47;*.java&quot;</code> to the fileset.</p>
Execute the task.
Add the files matched by the nested source files to the Vector as SourceFile instances.
Add the directories matched by the nested dirsets to the Vector and the base directories of the dirsets to the Path.  It also handles the packages and excludepackages attributes and elements.
Set the classpath for loading the driver using the classpath reference.
Class name of the JDBC driver; required.
Additional properties to put into the JDBC connection string.
Gets an instance of the required driver. Uses the ant class loader and the optionally the provided classpath.
Constructs a new Jikes object.
Do the compile with the specified arguments.
Invokes parseOutput.
Construct a new Parser object
Parse the output of a jikes compiler
Do the execution.
Does replacement on text using the hashtable of keys.
Set the single resource for this task.
Set the single file for this task.
Add a FileSet.
Add a ResourceCollection.
Set the comparison for use as a Condition.
Set the execution mode for working with files.
Execute the length task.
Fulfill the condition contract.
Sets the file to load.
Set the file to load.
Set the resource name of a property file to load.
Set the classpath to use when looking up a resource.
Set the classpath to use when looking up a resource, given as reference to a &lt;path&gt; defined elsewhere
load Ant properties from the source file or resource
Adds a FilterChain.
Set the source resource.
read in a source file to a property
Add the FilterChain element.
Set the source resource.
Run the task.
Logs a line to the log system of ant.
Logs a line to the log system of ant.
Stop the log stream handler.
Add the text element.
Convert the nested sequential to an unknown element
Add an attribute element.
Add an element element.
Create a new ant type based on the embedded tasks and types.
same or similar equality method for macrodef, ignores project and runtime info.
A parameter name value pair as a xml attribute.
Add a unknownElement for the macro instances nested elements.
Execute the templates instance. Copies the unknown element, substitutes the attributes, and calls perform on the unknown element.
a fileset of jar files to include in the URL, each separated by the separator
add a path to the URL. All elements in the path will be converted to individual URL entries
convert the filesets to urls.
convert the string buffer to a string, potentially stripping out any trailing separator
convert all paths to URLs
Create the url
convert a file to a URL;
Construct a manifest from Ant's default manifest file.
Read a manifest file from the given reader
Add a section to the manifest
Merge the contents of the given manifest into this manifest without merging Class-Path attributes.
Merge the contents of the given manifest into this manifest without merging Class-Path attributes.
Write the manifest out to a print writer without flattening multi-values attributes (i.e. Class-Path).
Write the manifest out to a print writer.
Convert the manifest to its string representation
Get the warnings for this manifest.
Sets a property, which must not already exist, with a space separated list of files and directories relative to the jar file's parent directory.
The JAR file to contain the classpath attribute in its manifest.
Default constructor
Add a section to the manifest
Add an attribute to the manifest - it is added to the main section.
Checks the attribute against the Jar-specification. Jar-Specification <i>"Name-Value pairs and Sections"</i>: <pre> name:       alphanum *headerchar alphanum:   {A-Z} | {a-z} | {0-9} headerchar: alphanum | - | _ </pre> So the resulting regexp would be <tt>[A-Za-z0-9][A-Za-z0-9-_]*</tt>. Because of JDK 1.2 compliance and the possible absence of a regexp matcher we can not use regexps here. Instead we have to check each character.
Create or update the Manifest when used as a task.
{@inheritDoc}. 
Sets the set of include patterns. Patterns may be separated by a comma or a space.
Set this to be the items in the base directory that you want to be included. You can also specify "*" for the items (ie: items="*") and it will include all the items in the base directory.
Sets the set of exclude patterns. Patterns may be separated by a comma or a space.
List of filenames and directory names to not include. They should be either , or " " (space) separated. The ignored files will be logged.
Sets whether default exclusions should be used or not.
Returns the directory scanner needed to access the files to process.
Sets the name of the file containing the includes patterns.
Sets the name of the file containing the includes patterns.
Sets case sensitivity of the file system
Sets whether or not symbolic links should be followed.
Add a new selector into this container.
add a "Select" selector entry on the selector list
add an "And" selector entry on the selector list
add an "Or" selector entry on the selector list
add a "Not" selector entry on the selector list
add a "None" selector entry on the selector list
add a majority selector entry on the selector list
add a selector date entry on the selector list
add a selector size entry on the selector list
add a selector filename entry on the selector list
add an extended selector entry on the selector list
add a contains selector entry on the selector list
add a present selector entry on the selector list
add a depth selector entry on the selector list
add a depends selector entry on the selector list
add a regular expression selector entry on the selector list
add a type selector entry on the type list
add a type selector entry on the type list
add the modified selector
add an arbitrary selector
create the directory and all parents
Constructor of object. This sets the forceOverwrite attribute of the Copy parent class to true.
{@inheritDoc}. 
Override copy's doFileOperations to move the files instead of copying them.
Try to move the file via a rename, but if this fails or filtering is enabled, copy the file then delete the sourceFile.
Its only ok to delete a directory tree if there are no files in it.
Go and delete the directory tree.
Go and delete the directory tree.
Attempts to rename a file from a source to a destination. If overwrite is set to true, this method overwrites existing file even if the destination file is newer.  Otherwise, the source file is renamed only if the destination file is older than it. Method then checks if token filtering is used.  If it is, this method returns false assuming it is the responsibility to the copyFile method.
Execute the task
the required destination file.
the file to compress; required.
The resource to pack; required.
Set the source resource.
validate, then hand off to the subclass
zip a stream to an output stream
zip a file to an output stream
Add a nested task to execute in parallel.
Execute the parallel tasks
Spin up required threads with a maximum number active at any given time.
The name of a file to send the output to, instead of patching the file(s) in place; optional.
The file containing the diff output; required.
flag to create backups; optional, default=false
flag to ignore whitespace differences; default=false
Strip the smallest prefix containing <i>num</i> leading slashes from filenames. <p>patch's <i>-p</i> option.
Work silently unless an error occurs; optional, default=false
Assume patch was created with old and new files swapped; optional, default=false
execute patch
Create a nested path element.
Add an arbitrary ResourceCollection.
Create a nested MAP element.
Set targetos to a platform to one of "windows", "unix", "netware", or "os/2"; current platform settings are used by default.
Set targetos to a platform to one of "windows", "unix", "netware", or "os/2"; current platform settings are used by default.
Do the execution.
Apply the configured map to a path element. The map is used to convert between Windows drive letters and Unix paths. If no map is configured, then the input string is returned unchanged.
Add a nested filenamemapper.
Make a new definition.
Removes this <code>ProcessDestroyer</code> as a shutdown hook, uses reflection to ensure pre-JDK 1.3 compatibility
Sets the property to the absolute filename of the given file. If the value of this attribute is an absolute path, it is left unchanged (with / and \ characters converted to the current platforms conventions). Otherwise it is taken as a path relative to the project's basedir and expanded.
Set the value of the property.
Set the value of the property as a String.
Set a (multiline) property as nested text.
the classpath to use when looking up a resource, given as reference to a &lt;path&gt; defined elsewhere
set the property in the project to the value. if the task was give a file, resource or env attribute here is where it is loaded
load properties from a url
Loads the properties defined in the InputStream into the given property. On Java5+ it supports reading from XML based property definition.
load properties from a file
load properties from a resource in the current classpath
load the environment values
iterate through a set of properties, resolve them then assign them
add a name value pair to the project property set
add a name value pair to the project property set
resolve properties inside a properties hashtable
Add a PropertyHelper delegate to the existing or new PropertyHelper.
Add a nested &lt;delegate refid="foo" /&gt; element.
Execute the task.
Set the <code>InputStream</code> from which to read the standard output of the process.
Set the <code>InputStream</code> from which to read the standard error of the process.
Start the <code>Thread</code>s.
Stop pumping the streams.
Creates a stream pumper to copy the given input stream to the given output stream.
Overridden so we can add the task as build listener.
Sets the level to which this recorder entry should log to.
The main execution.
Gets the recorder that's associated with the passed in name. If the recorder doesn't exist, then a new one is created.
Cleans recorder registry.
Cleans recorder registry, if this is the subbuild the task has been created in.
cleans recorder registry and removes itself from BuildListener list.
Turns off or on this recorder.
{@inheritDoc}. 
{@inheritDoc}. 
Cleans up any resources held by this recorder entry at the end of a subbuild if it has been created for the subbuild's project instance.
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
Set the project associated with this recorder entry.
Initially opens the file associated with this recorder. Used by Recorder.
Closes the file associated with this recorder. Used by Recorder.
Re-opens the file associated with this recorder. Used by Recorder.
Set the input to use for the task
File the output of the process is redirected to. If error is not redirected, it too will appear in the output
Set the file to which standard error is to be redirected.
Set a property from a ByteArrayOutputStream
Create the StreamHandler to use with our Execute instance.
Complete redirection. This operation will close any streams and create any specified property values.
Sets whether an existing file should be replaced.
Renames the file <code>src</code> to <code>dest</code>
Do the execution.
Validate nested elements.
Load a properties resource.
Perform the replacement on the given file. The replacement is performed on a temporary file which then replaces the original file.
Flushes all filters.
Performs the normal processing of the filters.
Creates the chain of filters to operate.
Logs the chain of filters to operate on the file.
Sets the name of a property file containing filters; optional. Each property will be treated as a replacefilter where token is the name of the property and value is the value of the property.
Set the string token to replace; required unless a nested <code>replacetoken</code> element or the <code>replacefilterresource</code> attribute is used.
Set the string value to use as token replacement; optional, default is the empty string "".
The name of a property file from which properties specified using nested <code>&lt;replacefilter&gt;</code> elements are drawn; required only if the <i>property</i> attribute of <code>&lt;replacefilter&gt;</code> is used.
Add a nested &lt;replacefilter&gt; element.
Support arbitrary file system based resource collections.
Adds the token and value as first &lt;replacefilter&gt; element. The token and value are always processed first.
Replace occurrences of str1 in StringBuffer str with str2.
Sort keys by size so that tokens that are substrings of other strings are tried later.
Set the ResourceCollection reference.
Execute as a Task.
perform the work
Adds to the classpath a reference to a &lt;path&gt; defined elsewhere.
Sets the compiler implementation to use; optional, defaults to the value of the <code>build.rmic</code> property, or failing that, default compiler for the current VM
get the name of the current compiler
Adds an implementation specific command line argument.
Get the additional implementation specific command line arguments.
Cleans up resources.
Move the generated source file(s) to the base directory
Scans the directory looking for class files to be compiled. The result is returned in the class variable compileList.
Sets the mailport parameter of this build task.
Add a nested task to Sequential. <p>
Execute all nestedTasks.
Adds permissions as a comma separated list.
A 3 digit octal string, specify the user, group and other modes in the standard Unix fashion;
Adds a collection of resources to set permissions on.
sign the jar(s)
Sign one jar. <p/> The signing only takes place if  {@link #isUpToDate(File,File)} indicatesthat it is needed.
If the tsa parameters are set, this passes them to the command. There is no validation of java version, as third party JDKs may implement this on earlier/later jarsigner implementations.
Adds a set of files (nested fileset attribute).
Adds a collection of resources (nested element).
Add a SQL transaction to execute
Set the delimiter type: "normal" or "row" (default "normal"). <p>The delimiter type takes two values - normal and row. Normal means that any occurrence of the delimiter terminate the SQL command whereas with row, only a line containing just the delimiter is recognized as the end of the command.</p>
Set the output file; optional, defaults to the Ant log.
Action to perform when statement fails: continue, stop, or abort optional; default &quot;abort&quot;
Load the sql file and then execute it
read in lines and execute them
Exec the sql statement.
print any results in the result set.
Creates and configures a Statement instance which is then cached for subsequent calls. <p>Subclasses that want to provide different Statement instances, should override this method but keep in mind that this class expects to get the same connection instance on consecutive calls.</p>
Copies data from the input stream to the output stream. Terminates as soon as the input stream is closed or an error occurs.
This method blocks until the StreamPumper finishes.
Stop the pumper as soon as possible. Note that it may continue to block on the input stream but it will really stop the thread as soon as it gets EOF or any byte, and it will be marked as finished.
Pass output sent to System.out to the new project.
Pass output sent to System.out to the new project.
Pass output sent to System.err to the new project.
Pass output sent to System.err to the new project.
Runs the various sub-builds.
Runs the given target on the provided build file.
Add a target to this Ant invocation.
Corresponds to <code>&lt;ant&gt;</code>'s nested <code>&lt;property&gt;</code> element.
Corresponds to <code>&lt;ant&gt;</code>'s nested <code>&lt;reference&gt;</code> element.
Corresponds to <code>&lt;ant&gt;</code>'s nested <code>&lt;propertyset&gt;</code> element.
Adds a directory set to the implicit build path. <p> <em>Note that the directories will be added to the build path in no particular order, so if order is significant, one should use a file list instead!</em>
Adds a file set to the implicit build path. <p> <em>Note that the directories will be added to the build path in no particular order, so if order is significant, one should use a file list instead!</em>
Adds an ordered file list to the implicit build path. <p> <em>Note that contrary to file and directory sets, file lists can reference non-existent files or directories!</em>
Adds a resource collection to the implicit build path.
Set the buildpath to be used to find sub-projects.
Buildpath to use, by reference.
Creates the &lt;ant&gt; task configured to run a specific target.
Assigns an Ant property to another.
Initialize the sync task.
Execute the sync task.
Removes all files and folders not found as keys of a table (used as a set!). <p>If the provided file is a directory, it is recursively scanned for orphaned files which will be removed as well.</p> <p>If the directory is an orphan, it will also be removed.</p>
Sets the destination directory.
Used to force listing of all names of copied files.
Overwrite any existing destination file(s).
Used to copy empty directories.
If false, note errors to the output but keep going.
Adds a set of files to copy.
Adds a collection of filesystem resources to copy.
The number of milliseconds leeway to give before deciding a target is out of date. <p>Default is 0 milliseconds, or 2 seconds on DOS systems.</p>
Add a new fileset with the option to specify permissions
Add a collection of resources to archive.
Set how to handle long files, those with a path&gt;100 chars. Optional, default=warn. <p> Allowable values are <ul> <li>  truncate - paths are truncated to the maximum length <li>  fail - paths greater than the maximum cause a build exception <li>  warn - paths greater than the maximum cause a warning and GNU is used <li>  gnu - GNU extensions are used for any paths greater than the maximum. <li>  omit - paths greater than the maximum are omitted from the archive </ul>
do the business
tar a file
tar a resource
Is the archive up to date in relationship to a list of files.
Adds the resources contained in this collection to the archive. <p>Uses the file based methods for file resources for backwards compatibility.</p>
Grabs all included files and directors from the FileSet and returns them as an array of (relative) file names.
Copies fullpath, prefix and permission attributes from the ArchiveFileSet to a new TarFileSet (or returns it unchanged if it already is a TarFileSet).
Default constructor. Creates a new Taskdef instance. This sets the adapter and the adaptto classes to TaskAdapter and Task.
Constructs a new JavacOutputStream with the given project as the output source for messages.
Processes a line of input and determines if an error occurred.
Creates the temporary file.
Set the new modification time of file(s) touched in the format &quot;MM/DD/YYYY HH:MM AM <i>or</i> PM&quot; or &quot;MM/DD/YYYY HH:MM:SS AM <i>or</i> PM&quot;. Optional, default=now.
Add a <code>Mapper</code>.
Add a set of files to touch.
Add a filelist to touch.
Add a collection of resources to touch.
Check that this task has been configured properly.
Execute the touch operation.
Does the actual work; assumes everything has been checked by now.
Touch a single file with the current timestamp (this.millis). This method does not interact with any nested mappers and remains for reasons of backwards-compatibility only.
Set a single target File.
Add a nested (filesystem-only) ResourceCollection.
create a custom format with the current prefix.
helper that encapsulates prefix logic and property setting policy (i.e. we use setNewProperty instead of setProperty).
The file to expand; required.
The resource to expand; required.
Set the source Archive resource.
Execute the task.
{@inheritDoc} 
This method is to be overridden by extending unarchival tasks.
Nested &lt;srcfiles&gt; element.
A nested filenamemapper
Evaluate (all) target and source file(s) to see if the target(s) is/are up-to-date.
Sets property to true if target file(s) have a more recent timestamp than (each of) the corresponding source file(s).
Scan a directory for files to check for "up to date"ness
verify our jar files
verify a JAR.
Set the max wait time unit
Set the check every time unit
Check repeatedly for the specified conditions until they become true or the timeout expires.
Actions to be taken on a successful waitfor. This is an override point. The base implementation does nothing.
Actions to be taken on an unsuccessful wait. This is an override point. It is where the timeout processing takes place. The base implementation sets the timeoutproperty if there was a timeout and the property was defined.
set the deployment descriptor to use (WEB-INF/web.xml); required unless <tt>update=true</tt>
add files under WEB-INF/lib/
add files under WEB-INF/classes
files to add under WEB-INF;
Set the classpath to use by reference.
execute it
Initializes the task.
Run the task.
Iterate through all nodes in the tree. 
Process the given node, adding any required attributes from this child node alone -- but <em>not</em> processing any children.
Actually add the given property/value to the project after writing a log message.
Return a reasonable attribute name for the given node. If we are using semantic attributes or collapsing attributes, the returned name is ".nodename". Otherwise, we return "(nodename)".  This is long-standing (and default) &lt;xmlproperty&gt; behavior.
Return the value for the given attribute. If we are not using semantic attributes, its just the literal string value of the attribute. <p>If we <em>are</em> using semantic attributes, then first dependent properties are resolved (i.e., ${foo} is resolved based on the foo property value), and then an appropriate data type is used.  In particular, location-based properties are resolved to absolute file names.  Also for refid values, look up the referenced object from the project.</p>
The XML file to parse; required.
Set the source resource.
the prefix to prepend to each property
add an XMLCatalog as a nested element; optional.
Defines the mapper to map source to destination files.
Adds a collection of resources to style in addition to the given file or the implicit fileset.
Add a nested &lt;style&gt; element.
Adds a nested filenamemapper.
Executes the task.
Set the optional classpath to the XSL processor
Set the reference to an optional classpath to the XSL processor
Add the catalog to our internal catalog
A system property to set during transformation.
A set of system properties to set during transformation.
Load named class either via the system classloader or a given custom classloader. As a side effect, the loader is set as the thread context classloader
If a custom classpath has been defined but no loader created yet, create the classloader and set it as the context classloader.
Throws a BuildException if the destination directory hasn't been specified.
Processes the given input XML file and stores the result in the given resultFile.
Ensure the directory exists for a given file
Get the XML catalog containing entity definitions
Create an instance of an XSL parameter for configuration by Ant.
Create an instance of an output property to be configured.
Initialize internal instance of XMLCatalog. Initialize XPath for parameter evaluation.
Loads the stylesheet and set xsl:param parameters.
Evaluates parameter expression according to its type.
Sets file parameter(s) for directory and filename if the attribute 'filenameparameter' or 'filedirparameter' are set in the task.
Create the factory element to configure a trax liaison.
Throws an exception with the given message if failOnError is true, otherwise logs the message using the WARN level.
This is the name/location of where to create the .zip file.
This is the name/location of where to create the file.
Adds a set of files.
Adds a set of files that can be read from an archive and be given a prefix/fullpath.
Add a collection of resources to be archived.
Adds a group of zip files.
Sets behavior for when a duplicate file is about to be added - one of <code>add</code>, <code>preserve</code> or <code>fail</code>. Possible values are: <code>add</code> (keep both of the files); <code>preserve</code> (keep the first version of the file found); <code>fail</code> halt a problem Default for zip tasks is <code>add</code>
Sets behavior of the task when no files match. Possible values are: <code>fail</code> (throw an exception and halt the build); <code>skip</code> (do not create any archive, but issue a warning); <code>create</code> (make an archive with no entries). Default for zip tasks is <code>skip</code>; for jar tasks, <code>create</code>.
validate and build
Build the zip file. This is called twice if doubleFilePass is true.
rename the zip file. 
Process doupdate 
Process groupfilesets 
Add the given resources.
Add a directory entry to the archive using a specified Unix-mode and the default mode for its parent directories (if necessary).
Add the given resources.
Create an empty zip file
Collect the resources that are newer than the corresponding entries (or missing) in the original archive. <p>If we are going to recreate the archive instead of updating it, all resources should be considered as new, if a single one is.  Because of this, subclasses overriding this method must call <code>super.getResourcesToAdd</code> and indicate with the third arg if they already know that the archive is out-of-date.</p> <p>This method first delegates to getNonFileSetResourcesToAdd and then invokes the FileSet-arg version.  All this to keep backwards compatibility for subclasses that don't know how to deal with non-FileSet ResourceCollections.</p>
Collect the resources that are newer than the corresponding entries (or missing) in the original archive. <p>If we are going to recreate the archive instead of updating it, all resources should be considered as new, if a single one is.  Because of this, subclasses overriding this method must call <code>super.getResourcesToAdd</code> and indicate with the third arg if they already know that the archive is out-of-date.</p>
Collect the resources that are newer than the corresponding entries (or missing) in the original archive. <p>If we are going to recreate the archive instead of updating it, all resources should be considered as new, if a single one is.  Because of this, subclasses overriding this method must call <code>super.getResourcesToAdd</code> and indicate with the third arg if they already know that the archive is out-of-date.</p>
Fetch all included and not excluded resources from the sets. <p>Included directories will precede included files.</p>
Fetch all included and not excluded resources from the collections. <p>Included directories will precede included files.</p>
Add a directory to the zip stream.
Add a directory to the zip stream.
Add a directory to the zip stream.
Sets the extra fields for the zip entry currently being added to the archive - if any.
Adds a new entry to the archive, takes care of duplicates as well.
Do any clean up necessary to allow this instance to be used again. <p>When we get here, the Zip file has been closed and all we need to do is to reset some globals.</p> <p>This method will only reset globals that have been changed during execute(), it will not alter the attributes or nested child elements.  If you want to reset the instance so that you can later zip a completely different set of files, you must use the reset method.</p>
Makes this instance reset all attributes to their default values and forget all children.
Drops all resources from the given array that are not selected
Logs a message at the given output level, but only if this is the pass that will actually create the archive.
Construct a new <code>AbstractFileSet</code>, shallowly cloned from the specified <code>AbstractFileSet</code>.
Retrieves the base-directory for this instance.
Creates a nested patternset.
Creates a single file fileset.
Appends <code>includes</code> to the current list of include patterns. <p>Patterns may be separated by a comma or a space.</p>
Appends <code>excludes</code> to the current list of exclude patterns. <p>Patterns may be separated by a comma or a space.</p>
Sets the <code>File</code> containing the includes patterns.
Sets the <code>File</code> containing the excludes patterns.
Whether default exclusions should be used or not.
Find out if the fileset is case sensitive.
Find out if the fileset wants to follow symbolic links.
Returns the directory scanner needed to access the files to process.
Set up the specified directory scanner against this AbstractFileSet's Project.
Set up the specified directory scanner against the specified project.
Indicates whether there are any selectors here.
Indicates whether there are any patterns here.
Gives the count of the number of selectors in this container.
Returns the set of selectors as an array.
Returns an enumerator for accessing the set of selectors.
Add a new selector into this container.
Add a "Select" selector entry on the selector list.
Add an "And" selector entry on the selector list.
Add an "Or" selector entry on the selector list.
Add a "Not" selector entry on the selector list.
Add a "None" selector entry on the selector list.
Add a majority selector entry on the selector list.
Add a selector date entry on the selector list.
Add a selector size entry on the selector list.
Add a DifferentSelector entry on the selector list.
Add a selector filename entry on the selector list.
Add a selector type entry on the selector list.
Add an extended selector entry on the selector list.
Add a contains selector entry on the selector list.
Add a present selector entry on the selector list.
Add a depth selector entry on the selector list.
Add a depends selector entry on the selector list.
Add a regular expression selector entry on the selector list.
Add the modified selector.
Add an arbitrary selector.
Returns included files as a list of semicolon-separated filenames.
Get the merged patterns for this AbstractFileSet.
Get the className attribute.
Add a Parameter.
Set the classpath to load the FilterReader through (attribute).
Set the classpath to load the FilterReader through (nested element).
Get the classpath.
Set the classpath to load the FilterReader through via reference (attribute).
The parameters for this filter.
Set the directory for the fileset.
Set the source Archive file for the archivefileset.  Prevents both "dir" and "src" from being specified.
Set the source Archive file for the archivefileset.  Prevents both "dir" and "src" from being specified.
Set the source Archive file for the archivefileset.  Prevents both "dir" and "src" from being specified.
Sets whether an error is thrown if an archive does not exist.
Get the archive file from which entries will be extracted.
Prepend this prefix to the path for each archive entry. Prevents both prefix and fullpath from being specified
Return the prefix prepended to entries in the archive file.
Set the full pathname of the single entry in this fileset. Prevents both prefix and fullpath from being specified
Return the full pathname of the single entry in this fileset.
Set the encoding used for this ZipFileSet.
Sets the srcFile for scanning. This is the jar or zip file that is scanned for matching entries.
Sets the src for scanning. This is the jar or zip file that is scanned for matching entries.
Returns the names of the files which matched at least one of the include patterns and none of the exclude patterns. The names are relative to the base directory.
Override parent implementation.
Returns the names of the directories which matched at least one of the include patterns and none of the exclude patterns. The names are relative to the base directory.
Override parent implementation.
Get the set of Resources that represent files.
Get the set of Resources that represent directories.
Get the named Resource.
enable assertions
disable assertions
enable or disable system assertions. Default is not set (neither -enablesystemassersions or -disablesytemassertions are used on the command line).
how many assertions are made...will resolve references before returning
add the assertions to a list in a format suitable for adding to a command line
apply all the assertions to the command.
add the assertions to a list in a format suitable for adding to a command line
helper method to add a string JVM argument to a command
clone the objects. This is not a full depth clone; the list of assertions is cloned, but it does not clone the underlying assertions.
Create a command line from a string.
Create an argument object and add it to our list of args. <p>Each commandline object has at most one instance of the argument class.</p>
Set the executable to run. All file separators in the string are converted to the platform specific value.
Append the arguments to the existing command.
Return the executable and all defined arguments.
Add the entire command, including (optional) executable to a list.
Returns all arguments defined by <code>addLine</code>, <code>addValue</code> or the argument object.
Append all the arguments to the tail of a supplied list.
Quote the parts of the given array in way that makes them usable as command line arguments.
Crack a command line.
Clear out the whole command line.
Clear out the arguments but leave the executable in place for another operation.
Return a String that describes the command and arguments suitable for verbose output before a call to <code>Runtime.exec(String[])<code>. <p>This method assumes that the first entry in the array is the executable to run.</p>
Return a String that describes the arguments suitable for verbose output before a call to <code>Runtime.exec(String[])<code>.
Constructor uses the VM we are running on now.
Add a system property.
Add a set of system properties.
Add a set of system properties.
Set the executable used to start the new JVM.
Set a jar file to execute via the -jar option.
Set the classname to execute.
Set the module to execute.
Get the command line to run a Java vm.
Add all the commands to a list identified by the iterator passed in.
Get the VM command parameters, including memory settings.
Cache current system properties and set them to those in this Java command.
Restore the cached system properties.
Clear out the java arguments.
Determine whether the classpath has been specified, and whether it shall really be used or be nulled by build.sysclasspath.
Determine whether the modulepath has been specified.
Determine whether the upgrademodulepath has been specified.
Parses a module name from JDK 9 main module command line argument.
Parses a classname from JDK 9 main module command line argument.
Construct a new Comparison with the specified value.
Evaluate a comparison result as from Comparator.compare() or Comparable.compareTo().
Convenience method.
Convenience method.
Check to see whether any DataType we hold references to is included in the Stack (which holds all DataType instances that directly or indirectly reference this instance, including this instance itself). <p>If one is included, throw a BuildException created by  {@link #circularReference circularReference}.</p> <p>This implementation is appropriate only for a DataType that cannot hold other DataTypes as children.</p> <p>The general contract of this method is that it shouldn't do anything if  {@link #checked <code>checked</code>} is true andset it to true on exit.</p>
Allow DataTypes outside org.apache.tools.ant.types to indirectly call dieOnCircularReference on nested DataTypes.
Allow DataTypes outside org.apache.tools.ant.types to indirectly call dieOnCircularReference on nested DataTypes. <p>Pushes dt on the stack, runs dieOnCircularReference and pops it again.</p>
Performs the check for circular references and returns the referenced object.  This version allows the fallback Project instance to be specified.
Adds descriptive text to the project.
Return the descriptions from all the targets of a project.
Returns included directories as a list of semicolon-separated paths.
add a variable. Validity checking is <i>not</i> performed at this point. Duplicates are not caught either.
get the variable list as an array
A copy constructor.
Set the dir attribute.
Set the filenames attribute.
Add a nested &lt;file&gt; nested element.
Add an AntFilterReader filter.
Return the filters.
Add a ClassConstants filter.
Add an ExpandProperties filter.
Add a HeadFilter filter.
Add a LineContains filter.
Add a LineContainsRegExp filter.
Add a PrefixLines filter.
Add a SuffixLines filter.
Add a ReplaceTokens filter.
Add a StripJavaCommands filter.
Add a StripLineBreaks filter.
Add a StripLineComments filter.
Add a TabsToSpaces filter.
Add a TailFilter filter.
Add an EscapeUnicode filter.
Add a TokenFilter filter.
Add a delete characters filter.
Add a containsregex filter.
Add a replaceregex filter.
Add a trim filter.
Add a replacestring filter.
Add an ignoreBlank filter.
Add a chainfilter filter.
Create a Filterset from another filterset.
Get the filters in the filter set.
Gets the filter hash of the FilterSet.
Set the file containing the filters for this filterset.
Read the filters from the given file.
Add a new filter.
Add a new filter made from the given token and value.
Adds the properties provided by the specified PropertySet to this filterset.
Does replacement on the given string with token matching. This uses the defined begintoken and endtoken values which default to @ for both.
This parses tokens which point to tokens. It also maintains a list of currently used tokens, so we cannot get into an infinite loop.
Constructor for a FilterSetCollection.
Add a filterset to the collection.
Constructor used by Ant's introspection mechanism for attribute population
Construct a new <code>Mapper</code> element.
Cannot mix add and addconfigured in same type, so provide this to override the add method.
Add a nested <code>FileNameMapper</code>.
Add a Mapper
Set the classpath to load the FileNameMapper through (nested element).
Set the classpath to load the FileNameMapper through via reference (attribute).
Returns a fully configured FileNameMapper implementation.
Gets the Class object associated with the mapper implementation.
Invoked by IntrospectionHelper for <code>setXXX(Path p)</code> attribute setters.
Construct an empty <code>Path</code>.
Adds a element definition to the path.
Parses a path definition and creates single PathElements.
Creates the nested <code>&lt;pathelement&gt;</code> element.
Adds a nested <code>&lt;fileset&gt;</code> element.
Adds a nested <code>&lt;filelist&gt;</code> element.
Adds a nested <code>&lt;dirset&gt;</code> element.
Adds a nested path
Add a nested <code>ResourceCollection</code>.
Creates a nested <code>&lt;path&gt;</code> element.
Append the contents of the other Path instance to this.
Adds the components on the given path which exist to this Path. Components that don't exist aren't added.
Same as addExisting, but support classpath behavior if tryUserDir is true. Classpaths are relative to user dir, not the project base. That used to break jspc test
Whether to cache the current path.
Splits a PATH (with : or ; as separators) into its parts.
Returns its argument with all file separator characters replaced so that they match the local OS conventions.
Translates occurrences at a position of / or \ to correct separator of the current platform and returns whether it had to do a replacement.
Fulfill the ResourceCollection contract.
Concatenates a class path in the order specified by the ${build.sysclasspath} property - using the supplied value if ${build.sysclasspath} has not been set.
Add the Java Runtime classes to this Path instance.
Emulation of extdirs feature in java >= 1.2. This method adds all files in the given directories (but not in sub-directories!) to the classpath, so that you don't have to specify them all one by one.
Fulfill the ResourceCollection contract. The Iterator returned will throw ConcurrentModificationExceptions if ResourceCollections are added to this container while the Iterator is in use.
Fulfill the ResourceCollection contract.
This is a patternset nested element.
add a name entry to the given list
Sets the name of the file containing the includes patterns.
Sets the name of the file containing the excludes patterns.
Reads path matching patterns from a file and adds them to the includes or excludes list (as appropriate).
Adds the patterns of the other instance to this set.
Returns the filtered include patterns.
Returns the filtered include patterns.
Helper for FileSet classes. Check if there are patterns defined.
Convert a vector of NameEntry elements into an array of Strings.
Read includesfile ot excludesfile if not already done so.
Add an inverted patternset.
Adds a permission to be granted.
Adds a permission to be revoked.
To be used by tasks wishing to use this security model before executing the part to be subject to these Permissions. Note that setting the SecurityManager too early may prevent your part from starting, as for instance changing classloaders may be prohibited. The classloader for the new situation is supposed to be present.
Initializes the list of granted permissions, checks the list of revoked permissions.
To be used by tasks that just finished executing the parts subject to these permissions.
Allow properties of a particular name in the set.
Allow properties whose names match a regex in the set.
Allow properties whose names start with a prefix in the set.
Allow builtin (all, system or commandline) properties in the set.
Set a mapper to change property names.
Add a property reference (nested element) to the references to be used.
Add another property set to this set.
Create a mapper to map the property names.
Add a nested FileNameMapper.
Set whether to reevaluate the set every time the set is used. Default is true.
Set whether to negate results. If "true", all properties not selected by nested elements will be returned. Default is "false".
Get the dynamic attribute.
Get the mapper attribute.
Convert the system properties to a hashtable. Use propertynames to get the list of properties (including default ones).
This is the operation to get the existing or recalculated properties.
A debug toString. This gets a comma separated list of key=value pairs for the properties in the set. The output order is sorted according to the keys' <i>natural order</i>.
Fulfill the ResourceCollection interface.
Fulfill the ResourceCollection contract.
Construct a new Quantifier with the specified value.
Add the input file mapper.
Add the output file mapper.
Add the error file mapper.
Create a nested input <code>FilterChain</code>.
Create a nested output <code>FilterChain</code>.
Create a nested error <code>FilterChain</code>.
Configure the specified <code>Redirector</code>.
Configure the specified <code>Redirector</code> for the specified sourcefile.
Create a merge mapper pointing to the specified destination file.
Return a <code>File[]</code> from the specified set of filenames.
Create a reference to a named ID.
Create a reference to a named ID in a particular project.
Resolve the reference, using the associated project if it set, otherwise use the passed in project.
Gets the pattern string for this RegularExpression in the given project.
provides a reference to the Regexp contained in this
Sets the name, lastmodified flag, exists flag, directory flag, and size.
Set the name of this Resource.
Set the exists attribute.
Tells the modification time in milliseconds since 01.01.1970 (the "epoch").
Set the last modification attribute.
Set the directory attribute.
Set the size of this Resource.
The username for the tar entry This is not the same as the UID.
The uid for the tar entry This is not the same as the User name.
The groupname for the tar entry; optional, default="" This is not the same as the GID.
The GID for the tar entry; optional, default="0" This is not the same as the group name.
Create a new scanner.
A TarFileset accepts another TarFileSet or a FileSet as reference FileSets are often used by the war task for the lib attribute
Configure a fileset based on this fileset. If the fileset is a TarFileSet copy in the tarfileset specific attributes.
A check attributes for TarFileSet. If there is a reference, and it is a TarFileSet, the tar fileset attributes cannot be used.
Fills the file and directory maps with resources read from the archive.
Construct a new TimeComparison with the specified value.
Compare two times.
Default constructor
Allows nested classpath elements. Not allowed if this catalog is itself a reference to another catalog -- that is, a catalog cannot both refer to another <em>and</em> contain elements or other attributes.
Allows simple classpath string.  Not allowed if this catalog is itself a reference to another catalog -- that is, a catalog cannot both refer to another <em>and</em> contain elements or other attributes.
Allows classpath reference.  Not allowed if this catalog is itself a reference to another catalog -- that is, a catalog cannot both refer to another <em>and</em> contain elements or other attributes.
Creates a nested <code>&lt;catalogpath&gt;</code> element. Not allowed if this catalog is itself a reference to another catalog -- that is, a catalog cannot both refer to another <em>and</em> contain elements or other attributes.
Allows catalogpath reference.  Not allowed if this catalog is itself a reference to another catalog -- that is, a catalog cannot both refer to another <em>and</em> contain elements or other attributes.
Creates the nested <code>&lt;dtd&gt;</code> element.  Not allowed if this catalog is itself a reference to another catalog -- that is, a catalog cannot both refer to another <em>and</em> contain elements or other attributes.
Creates the nested <code>&lt;entity&gt;</code> element.    Not allowed if this catalog is itself a reference to another catalog -- that is, a catalog cannot both refer to another <em>and</em> contain elements or other attributes.
Loads a nested <code>&lt;xmlcatalog&gt;</code> into our definition.  Not allowed if this catalog is itself a reference to another catalog -- that is, a catalog cannot both refer to another <em>and</em> contain elements or other attributes.
Implements the EntityResolver.resolveEntity() interface method.
Implements the URIResolver.resolve() interface method.
Utility method to remove trailing fragment from a URI. For example, <code>http://java.sun.com/index.html#chapter1</code> would return <code>http://java.sun.com/index.html</code>.
Utility method to lookup a ResourceLocation in the filesystem.
Utility method to lookup a ResourceLocation in the classpath.
Utility method to lookup a ResourceLocation in URL-space.
Return a new archive scanner based on this one.
A ZipFileset accepts another ZipFileSet or a FileSet as reference FileSets are often used by the war task for the lib attribute
A check attributes for zipFileSet. If there is a reference, and it is a ZipFileSet, the zip fileset attributes cannot be used.
Fills the file and directory maps with resources read from the archive.
Encode a byte array into base64 encoding.
{@inheritDoc}. 
Convenience overloaded version of  {@link #getClassLoaderForPath(Project,Path,String,boolean)}. <p>Delegates to the other one after extracting the referenced Path from the Project. This checks also that the passed Reference is pointing to a Path all right.</p>
Gets a classloader that loads classes from the classpath defined in the path argument. <p>Based on the setting of the magic property 'ant.reuse.loader' this will try to reuse the previously created loader with that id, and of course store it there upon creation.</p>
Gets a fresh, different, previously unused classloader that uses the passed path as its classpath. <p>This method completely ignores the ant.reuse.loader magic property and should be used with caution.</p>
Dictionary does not have an equals. Please use  Map.equals(). <p>Follows the equals contract of Java 2's Map.</p>
Creates a comma separated list of all values held in the given collection.
Dictionary does not know the putAll method. Please use Map.putAll().
Returns a collection containing all elements of the iterator.
{@inheritDoc}. 
Close the stream.
Read a byte.
Set a managing <code>Task</code> for this <code>ConcatFileInputStream</code>.
Log a message with the specified logging level.
Construct a new ConcatResourceInputStream for the specified ResourceCollection.
Close the stream.
Read a byte.
Log a message with the specified logging level.
Add a <code>Mapper</code>.
An add configured version of the add method. This class used to contain an add method and an addConfiguredMapper method. Dur to ordering, the add method was always called first. This addConfigured method has been added to allow chaining to work correctly.
Format a date/time into a specific pattern.
Format an elapsed time into a plurialization correct string. It is limited only to report elapsed time in minutes and seconds and has the following behavior. <ul> <li>minutes are not displayed when 0. (ie: "45 seconds")</li> <li>seconds are always displayed in plural form (ie "0 seconds" or "10 seconds") except for 1 (ie "1 second")</li> </ul>
return a lenient date format set to GMT time zone.
Calculate the phase of the moon for a given date. <p>Code heavily influenced by hacklib.c in <a href="http://www.nethack.org/">Nethack</a></p> <p>The Algorithm: <pre> moon period = 29.53058 days ~= 30, year = 365.2422 days days moon phase advances on first day of year compared to preceding year = 365.2422 - 12*29.53058 ~= 11 years in Metonic cycle (time until same phases fall on the same days of the month) = 18.6 ~= 19 moon phase on first day of year (epact) ~= (11*(year%19) + 18) % 30 (18 as initial condition for 1900) current phase in days = first day phase + days elapsed in year 6 moons ~= 177 days 177 ~= 8 reported phases * 22 + 11/22 for rounding </pre>
Returns the current Date in a format suitable for a SMTP date header.
Construct a DeweyDecimal from an array of integer components.
Construct a DeweyDecimal from string in DeweyDecimal format.
Return <code>true</code> if this <code>DeweyDecimal</code> is equal to the other <code>DeweyDecimal</code>.
Return <code>true</code> if this <code>DeweyDecimal</code> is greater than the other <code>DeweyDecimal</code>.
Return <code>true</code> if this <code>DeweyDecimal</code> is greater than or equal to the other <code>DeweyDecimal</code>.
Return string representation of <code>DeweyDecimal</code>.
Compares this DeweyDecimal with another one.
Writes a DOM tree to a stream in UTF8 encoding. Note that it prepends the &lt;?xml version='1.0' encoding='UTF-8'?&gt; if the xmlDeclaration field is true. The indent number is set to 0 and a 2-space indent.
Writes the XML declaration if xmlDeclaration is true.
Writes a DOM tree to a stream.
Writes the opening tag - including all attributes - corresponding to a DOM element.
Writes the opening tag - including all attributes - corresponding to a DOM element.
Writes a DOM tree to a stream.
Drop characters that are illegal in XML documents. <p>Also ensure that we are not including an <code>]]&gt;</code> marker by replacing that sequence with <code>&amp;#x5d;&amp;#x5d;&amp;gt;</code>.</p> <p>See XML 1.0 2.2 <a href="http://www.w3.org/TR/1998/REC-xml-19980210#charsets"> http://www.w3.org/TR/1998/REC-xml-19980210#charsets</a> and 2.7 <a href="http://www.w3.org/TR/1998/REC-xml-19980210#sec-cdata-sect">http://www.w3.org/TR/1998/REC-xml-19980210#sec-cdata-sect</a>.</p>
Drop characters that are illegal in XML documents and write the rest to the given writer. <p>Also ensure that we are not including an <code>]]&gt;</code> marker by replacing that sequence with <code>&amp;#x5d;&amp;#x5d;&amp;gt;</code>.</p> <p>See XML 1.0 2.2 <a href="http://www.w3.org/TR/1998/REC-xml-19980210#charsets"> http://www.w3.org/TR/1998/REC-xml-19980210#charsets</a> and 2.7 <a href="http://www.w3.org/TR/1998/REC-xml-19980210#sec-cdata-sect">http://www.w3.org/TR/1998/REC-xml-19980210#sec-cdata-sect</a>.</p>
Is the given argument a character or entity reference?
Creates a named Element and appends it to the given element, returns it. <p>This means <pre>createChildElement(&lt;a&gt;, "b")</pre> creates <pre> &lt;a&gt; &lt;b/&gt; &lt;/a&gt; </pre> and returns <code>&lt;b&gt;</code>.
Adds nested text. <p>This means <pre>appendText(&lt;a&gt;, "b")</pre> creates <pre> &lt;a&gt;b&lt;/a&gt; </pre>
Adds a nested CDATA section. <p>This means <pre>appendCDATA(&lt;a&gt;, "b")</pre> creates <pre> &lt;a&gt;&lt;[!CDATA[b]]&gt;&lt;/a&gt; </pre>
Adds nested text in a new child element. <p>This means <pre>appendTextElement(&lt;a&gt;, "b", "c")</pre> creates <pre> &lt;a&gt; &lt;b&gt;c&lt;/b&gt; &lt;/a&gt; </pre>
Adds a nested CDATA section in a new child element. <p>This means <pre>appendCDATAElement(&lt;a&gt;, "b", "c")</pre> creates <pre> &lt;a&gt; &lt;b&gt;&lt;![CDATA[c]]&gt;&lt;/b&gt; &lt;/a&gt; </pre>
Convenience method to copy a file from a source to a destination. No filtering is performed.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used and if source files may overwrite newer destination files.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if filter chains must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if filter chains must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Convenience method to copy a file from a source to a destination. No filtering is performed.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used and if source files may overwrite newer destination files.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if source files may overwrite newer destination files, the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code> and which character encoding to assume.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if filter chains must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if filter chains must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if filter chains must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Convenience method to copy a file from a source to a destination specifying if token filtering must be used, if filter chains must be used, if source files may overwrite newer destination files and the last modified time of <code>destFile</code> file should be made equal to the last modified time of <code>sourceFile</code>.
Calls File.setLastModified(long time). Originally written to to dynamically bind to that call on Java1.2+.
On DOS and NetWare, the evaluation of certain file specifications is context-dependent.  These are filenames beginning with a single separator (relative to current root directory) and filenames with a drive specification and no intervening separator (relative to current directory of the specified root).
Verifies that the specified filename represents an absolute path. Differs from new java.io.File("filename").isAbsolute() in that a path beginning with a double file separator--signifying a Windows UNC--must at minimum match "\\a\b" to be considered an absolute path.
Translate a path into its native (platform specific) format. <p> This method uses PathTokenizer to separate the input path into its components. This handles DOS style paths in a relatively sensible way. The file separators are then converted to their platform specific versions.
&quot;Normalize&quot; the given absolute path. <p>This includes: <ul> <li>Uppercase the drive letter if there is one.</li> <li>Remove redundant slashes after the drive spec.</li> <li>Resolve all ./, .\, ../ and ..\ sequences.</li> <li>DOS style paths that start with a drive letter will have \ as the separator.</li> </ul> Unlike  {@link File#getCanonicalPath()} this methodspecifically does not resolve symbolic links.
Dissect the specified absolute path.
Returns a VMS String representation of a <code>File</code> object. This is useful since the JVM by default internally converts VMS paths to Unix style. The returned String is always an absolute path.
Create a temporary file in a given directory. <p>The file denoted by the returned abstract pathname did not exist before this method was invoked, any subsequent invocation of this method will yield a different file name.</p>
Read from reader till EOF.
Create a new file, optionally creating parent directories.
Checks whether a given file is a symbolic link. <p>It doesn't really test for symbolic links but whether the canonical and absolute paths of the file are identical--this may lead to false positives on some platforms.</p>
Removes a leading path from a second path.
Learn whether one path "leads" another.
Are the two File instances pointing to the same object on the file system?
Renames a file, even if that involves crossing file system boundaries. <p>This will remove <code>to</code> (if it exists), ensure that <code>to</code>'s parent directory exists and move <code>from</code>, which involves deleting <code>from</code> as well.</p>
test whether a file or directory exists, with an error in the upper/lower case spelling of the name. Using this method is only interesting on case insensitive file systems (Windows).<br> It will return true only if 3 conditions are met : <br> <ul> <li>operating system is case insensitive</li> <li>file exists</li> <li>actual name from directory reading is different from the supplied argument</li> </ul> <br> the purpose is to identify files or directories on case-insensitive filesystems whose case is not what is expected.<br> Possibly to rename them afterwards to the desired upper/lowercase combination.
Returns true if the source is older than the dest. If the dest file does not exist, then the test returns false; it is implicitly not up do date.
Close a Writer without throwing any exception if something went wrong. Do not attempt to close it if the argument is null.
Close a Reader without throwing any exception if something went wrong. Do not attempt to close it if the argument is null.
Close a stream without throwing any exception if something went wrong. Do not attempt to close it if the argument is null.
Close a stream without throwing any exception if something went wrong. Do not attempt to close it if the argument is null.
Close a Channel without throwing any exception if something went wrong. Do not attempt to close it if the argument is null.
Delete the file with  {@link File#delete()} if the argument is not null.Do nothing on a null argument.
Get an IdentityStack containing the contents of the specified Stack.
Construct a new IdentityStack with the specified Object as the bottom element.
Finds an executable that is part of a JRE installation based on the java.home system property. <p><code>java</code>, <code>keytool</code>, <code>policytool</code>, <code>orbd</code>, <code>rmid</code>, <code>rmiregistry</code>, <code>servertool</code> and <code>tnameserv</code> are JRE executables on Sun based JRE's.</p> <p>You typically find them in <code>JAVA_HOME/jre/bin</code> if <code>JAVA_HOME</code> points to your JDK installation.  JDK &lt; 1.2 has them in the same directory as the JDK executables.</p>
Finds an executable that is part of a JDK installation based on the java.home system property. <p>You typically find them in <code>JAVA_HOME/bin</code> if <code>JAVA_HOME</code> points to your JDK installation.</p>
Look for an executable in a given directory.
Testing helper method; kept here for unification of changes.
get a vector of strings of packages built into that platforms runtime jar(s)
Writes the command into a temporary DCL script and returns the corresponding File object. It is the job of the caller to delete the file on exit.
Returns the parser factory to use to create namespace aware parsers.
Translate a SAXException into a BuildException
Store a new key-value pair, or add a new one. The normal functionality is taken care of by the superclass in the call to {@link #setProperty}; this method takes care of this classes extensions.
Echo the lines of the properties (including blanks and comments) to the stream.
Save the properties to a file.
Reads a properties file into an internally maintained collection of logical lines (possibly spanning physcial lines), which make up the comments, blank lines and properties of the file.
Reads the first line and determines the EOL-style of the file (relies on the style to be consistent, of course). <p>Sets LS as a side-effect.</p>
Returns <code>true</code> if the line represented by <code>s</code> is to be continued on the next line of the file, or <code>false</code> otherwise.
Unescape the string according to the rules for a Properites file, as laid out in the docs for <a href="http://java.sun.com/j2se/1.3/docs/api/java/util/Properties.html">java.util.Properties</a>.
Escape the string <code>s</code> according to the rules in the docs for <a href="http://java.sun.com/j2se/1.3/docs/api/java/util/Properties.html">java.util.Properties</a>.
Remove the comments in the leading up the  {@link logicalLines}list leading up to line <code>pos</code>.
Explicitly open the file for writing. <p>Returns silently if the file has already been opened.</p>
Close the file.
Delegates to the three-arg version.
Write part of a byte array.
Write a byte.
Get a enumeration over the elements.
Check if the table is empty.
Get the size of the table.
Check if the table contains a particular value.
Check if the table contains a particular key.
Get an enumeration over the keys.
Construct a new <code>LeadPipeInputStream</code> with the specified buffer size.
Construct a new <code>LeadPipeInputStream</code> to pull from the specified <code>PipedOutputStream</code>, using a circular buffer of the specified size.
Set a managing <code>Task</code> for this <code>LeadPipeInputStream</code>.
Log a message with the specified logging level.
get the next line from the input
Set the context classloader
JDK1.1 compatible access to set the context class loader.
Replaces non-ASCII characters with their Unicode-Escapes. <p>Expects to be called once per line if applied to a file.</p>
Replaces Unicode-Escapes. <p>Expects to be called once per line if applied to a file.</p>
Create a new <code>OutputStreamFunneler</code> for the specified <code>OutputStream</code>, with the specified timeout value.
Get a &quot;funnel&quot; <code>OutputStream</code> instance to write to this <code>OutputStreamFunneler</code>'s underlying <code>OutputStream</code>.
Returns the part of the given string that matches the * in the &quot;from&quot; pattern replacing file separators with dots
Translates a Unix stat(2)  {@code st_mode} compatible value intoa set of permissions.
Sets permissions on a  {@link Resource} - doesn't do anythingfor unsupported resource types. <p>Supported types are:</p> <ul> <li>any  {@link FileProvider}</li> <li> {@link ArchiveResource}</li> </ul>
Sets permissions of a  {@link Resource} - returns an empty setfor unsupported resource types or file systems that don't support PosixFilePermissions and no fallback has been provided.. <p>Supported types are:</p> <ul> <li>any  {@link FileProvider}</li> <li> {@link ArchiveResource}</li> </ul>
Determines the file type of a  {@link Path}.
provide id of the current process
Close the PropertyOutputStream, storing the property.
Reads from the <code>Reader</code> into a byte array
Resets the Reader.
Closes the Reader.
Constructor for RegexpPatternMapper.
Attribute specifying whether to ignore the case difference in the names.
Replace all backreferences in the to pattern with the matched groups of the source.
Tells which source files should be reprocessed based on the last modification date of target files.
Tells which sources should be reprocessed based on the last modification date of targets.
Tells which sources should be reprocessed because the given selector selects at least one target.
Convenience method to copy content from one Resource to another. No filtering is performed.
Convenience method to copy content from one Resource to another. No filtering is performed.
Convenience method to copy content from one Resource to another specifying whether token filtering must be used, whether filter chains must be used, whether newer destination files may be overwritten and whether the last modified time of <code>dest</code> file should be made equal to the last modified time of <code>source</code>.
Convenience method to copy content from one Resource to another specifying whether token filtering must be used, whether filter chains must be used, whether newer destination files may be overwritten and whether the last modified time of <code>dest</code> file should be made equal to the last modified time of <code>source</code>.
Convenience method to copy content from one Resource to another specifying whether token filtering must be used, whether filter chains must be used, whether newer destination files may be overwritten and whether the last modified time of <code>dest</code> file should be made equal to the last modified time of <code>source</code>.
Set the last modified time of an object implementing org.apache.tools.ant.types.resources.Touchable .
Compare the content of two Resources. A nonexistent Resource's content is "less than" that of an existing Resource; a directory-type Resource's content is "less than" that of a file-type Resource.
Convenience method to turn any fileProvider into a basic FileResource with the file's immediate parent as the basedir, for tasks that need one.
Binary compares the contents of two Resources. <p> simple but sub-optimal comparison algorithm. written for working rather than fast. Better would be a block read into buffers followed by long comparisons apart from the final 1-7 bytes. </p>
Text compares the contents of two Resources. Ignores different kinds of line endings.
Log which Resources (if any) have been modified in the future.
Check if need to mess about with the classloader. The class loader will need to be modified for two reasons: <ol> <li>language is at a higher level than bsf for engines in bsf, move bsf. </li> <li>bsf is at a higher level than oata.util.optional.ScriptRunner </li> </ol> Assume a simple model for the loader: thisloader&lt;-customloader or thisloader
Add a single object into the script context.
Create a ScriptRunner.
Create a script runner if the scriptManager matches the passed in manager. This checks if the script manager exists in the scriptLoader classloader and if so it creates and returns the script runner.
Create and set text on a script.
Set the classpath to be used when searching for classes and resources.
Set the classpath by reference.
Add any source resource.
Restrict the given set of files to those that are newer than their corresponding target files.
Convenience layer on top of restrict that returns the source files as File objects (containing absolute paths if srcDir is absolute).
attribute delims - the delimiter characters
find and return the next token
Splits up a string where elements are separated by a specific character and return all elements.
Convenient method to retrieve the full stacktrace from a given exception.
xml does not do "c" like interpretation of strings. i.e. \n\r\t etc. this method processes \n, \r, \t, \f, \\ also subs \s -&gt; " \n\r\t\f" a trailing '\' will be ignored
Takes a human readable size representation eg 10K a long value. Doesn't support 1.1K or other rational values.
Checks whether a given file is a symbolic link. <p>It doesn't really test for symbolic links but whether the canonical and absolute paths of the file are identical--this may lead to false positives on some platforms.</p>
Checks whether a given file is a broken symbolic link. <p>It doesn't really test for symbolic links but whether Java reports that the File doesn't exist but its parent's child list contains it--this may lead to false positives on some platforms.</p> <p>Note that #isSymbolicLink returns false if this method returns true since Java won't produce a canonical name different from the abolute one if the link is broken.</p>
Delete a symlink (without deleting the associated resource). <p>This is a utility method that removes a unix symlink without removing the resource that the symlink points to. If it is accidentally invoked on a real file, the real file will not be harmed, but silently ignored.</p> <p>Normally this method works by getting the canonical path of the link, using the canonical path to rename the resource (breaking the link) and then deleting the link. The resource is then returned to its original name inside a finally block to ensure that the resource is unharmed even in the event of an exception.</p> <p>There may be cases where the algorithm described above doesn't work, in that case the method tries to use the native "rm" command on the symlink instead.</p>
Log a message with <code>MSG_INFO</code> priority
Log a message with <code>MSG_ERR</code> priority
Log a message with <code>MSG_WARN</code> priority
Log a message with <code>MSG_VERBOSE</code> priority
Log a message with <code>MSG_DEBUG</code> priority
Flush both output streams.
Write a byte array to both output streams.
Write a byte array to both output streams.
Write a byte to both output streams.
returns the unicode representation of a char without the leading backslash
Returns the part of the given string that matches the * in the &quot;from&quot; pattern replacing dots with file separators
UUEncode bytes from the input stream, and write them as text characters to the output stream. This method will run until it exhausts the input stream.
Encode a string to the output.
Encode a single line of data (less than or equal to 45 characters).
This implementation may not add the element at the given index if it is already contained in the collection.
This implementation may not add all elements at the given index if any of them are already contained in the collection.
Add a timeout observer.
Remove a timeout observer.
Inform the observers that a timeout has occurred. This happens in the watchdog thread.
Start the watch dog.
Stop the watch dog.
The run method of the watch dog thread. This simply does a wait for the timeout time, and if the stop flag has not been set when the wait has returned or has been interrupted, the watch dog listeners are informed.
Block on the notify object and so wait until the thread is finished.
Raise an exception if one was caught
Constructor for XMLFragment object.
Add nested text, expanding properties as we go
Creates a nested element.
Add text to a node.
Assert that a string contains the given substring.
Assert that a string contains the given substring. A default failure message will be used if the target string is not found.
Assert that a string does not contain the given substring.
Assert that a string does not contain the given substring. A default failure message will be used if the target string is found.
Asserts that getResources won't return resources that cannot be seen by AntClassLoader but by ClassLoader.this.parent.
Tidies up following a test execution. If the currently configured project has a <tt>tearDown</tt> target then this will automatically be called, otherwise this method will not perform any actions.
Sets up to run the named project
Sets up to run the named project
Executes a target in the configured Ant build file. Requires #configureProject() to have been invoked before this call.
Automatically calls the target called "tearDown" from the build file tested if it exits. This allows to use Ant tasks directly in the build file to clean up after each test. Note that no "setUp" target is automatically called, since it's trivial to have a test target depend on it.
run a target, expect for any build exception
Assert that only the given message has been logged with a priority &lt;= INFO when running the given target.
Assert that the given substring is in the log messages.
Assert that the given substring is not in the log messages.
Assert that the given substring is in the output messages.
Assert that the given substring is in the output messages.
Assert that the given substring is not in the output messages.
Assert that the given message has been logged with a priority &lt;= INFO when running the given target.
Assert that the given message has not been logged with a priority &lt;= INFO when running the given target.
Assert that the given message has been logged with a priority &gt;= VERBOSE when running the given target.
Assert that the given substring is in the log messages.
execute the target, verify output matches expectations
Executes the target, verify output matches expectations and that we got the named error at the end
Sets up to run the named project
Sets up to run the named project
Executes a target we have set up
Runs a target, wait for a build exception.
run a target, expect an exception string containing the substring we look for (case sensitive match)
call a target, verify property is as expected
assert that a property equals a value; comparison is case sensitive.
assert that a property equals "true".
assert that a property is null.
call a target, verify named property is "true".
Call a target, verify property is null.
Retrieve a resource from the caller classloader to avoid assuming a vm working directory. The resource path must be relative to the package name or absolute from the root path.
Test whether the build file treats nested elements without regard to case. This should not cause an exception.
Test case for setFollowLinks() and associated functionality. Only supports test on Linux at the moment because Java has no real notion of symlinks built in, so an os-specfic call to Runtime.exec() must be made to create a link to test against.
Test inspired by Bug#1415.
Reads the contents of a file into a String.
Modified the timestamp on a file so it's <tt>seconds</tt> earlier than it was before. Where <tt>file</tt> is a directory, this function recurses into all child files (and directories) and reduces their modified timestamps by the same range, rather than set all timestamps to the same time.
This test has been a starting point for moving the code to FileUtils.
convenience method the drive letter is in lower case under cygwin calling this method allows tests where FileUtils.normalize is called via resolveFile to pass under cygwin
we bind to an existing test file because we are too lazy to write our own, and we don't really care what it is
run through the test cases of expansion
new things we want
old things we dont want; not a test no more
little helper method to validate stuff
Not really a UnknownElement test but rather one of "what information is available in taskFinished".
Test an example that is similar to the one given in the API If this testcase takes >90s to complete, it is very likely that the two threads are blocked waiting for each other and Thread.join() timed out.
Test a MailMessage with no cc or bcc lines
Test a MailMessage with no to or bcc lines
Test a MailMessage with no to or cc lines
Test a MailMessage with no subject line Subject is an optional field (RFC 822 s4.1)
Test a MailMessage with empty body message
Test a MailMessage with US-ASCII character set The next four testcase can be kinda hard to debug as Ant will often print the junit failure in US-ASCII.
test round-tripping long (GNU) entries
test round-tripping long (POSIX) entries
Test file mode magic.
Test content.
Test reparse
test parser.
Test merge methods
test handling of extra fields
test handling of extra fields via central directory
test handling of extra fields
Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-94" >COMPRESS-94</a>.
Test conversion to bytes.
Test conversion from bytes.
Test the contract of the equals method.
Test sign handling.
Test conversion to bytes.
Test conversion from bytes.
Test the contract of the equals method.
Test sign handling.
Assemble the reader
helper method to set the project on an object. the reflection setProject does not work for anonymous/protected/private classes, even if they have public methods.
Deregisters Classloaders from the project so GC can remove them later.
Creates and parameterizes a new FilterReader from a &lt;filterreader&gt; element.
Get the constants declared in a file as name=value
Based on the parameter passed in, this method creates the necessary factory desired. The current mapping for compiler names are as follows: <ul><li>jikes = jikes compiler <li>classic, javac1.1, javac1.2 = the standard compiler from JDK 1.1/1.2 <li>modern, javac1.3, javac1.4, javac1.5 = the compiler of JDK 1.3+ <li>jvc, microsoft = the command line compiler from Microsoft's SDK for Java / Visual J++ <li>kjc = the kopi compiler</li> <li>gcj = the gcj compiler from gcc</li> <li>sj, symantec = the Symantec Java compiler</li> <li><i>a fully qualified classname</i> = the name of a compiler adapter </ul>
Set the Javac instance which contains the configured compilation attributes.
Builds the compilation classpath.
Builds the modulepath.
Builds the upgrademodulepath.
Builds the modulesourcepath for multi module compilation.
Does the command line argument processing common to classic and modern.  Doesn't add the files to compile.
Does the command line argument processing for modern.  Doesn't add the files to compile.
Does the command line argument processing for modern and adds the files to compile as well.
Does the command line argument processing for classic and adds the files to compile as well.
Logs the compilation parameters, adds the files to compile and logs the &quot;niceSourceList&quot;
Do the compile with the specified arguments. <p>The working directory if the executed process will be the project's base directory.</p>
Add extdirs to classpath
Adds the command line arguments specific to the current implementation.
Combines a user specified bootclasspath with the system bootclasspath taking build.sysclasspath into account.
Performs a compile using the gcj compiler.
Set up the gcj commandline.
Whether any of the arguments given via &lt;compilerarg&gt; implies that compilation to native code is requested.
Run the compilation.
Run the compilation.
Performs a compile using the Javac externally.
helper method to execute our command on VMS.
Performs a compile using the Jikes compiler from IBM. Mostly of this code is identical to doClassicCompile() However, it does not support all options like extdirs, deprecation and so on, because there is no option in jikes and I don't understand what they should do. It has been successfully tested with jikes &gt;1.10.
Run the compilation.
Run the compilation.
setup kjc command arguments.
Performs a compile using the sj compiler from Symantec.
Evaluate the condition.
Add an &lt;available&gt; condition.
Add an &lt;checksum&gt; condition.
Add an &lt;uptodate&gt; condition.
Add an &lt;not&gt; condition "container".
Add an &lt;and&gt; condition "container".
Add an &lt;or&gt; condition "container".
Add an &lt;equals&gt; condition.
Add an &lt;os&gt; condition.
Add an &lt;isset&gt; condition.
Add an &lt;http&gt; condition.
Add a &lt;socket&gt; condition.
Add a &lt;filesmatch&gt; condition.
Add a &lt;contains&gt; condition.
Add a &lt;istrue&gt; condition.
Add a &lt;isfalse&gt; condition.
Add an &lt;isreference&gt; condition.
Add an &lt;isfileselected&gt; condition.
Add an arbitrary condition
Set the first argument
Set the first string
Set the second argument
Set the second string
Evaluate the condition.
Set the classpath to be used when searching for classes and resources.
Set the classpath by reference.
{@inheritDoc}. 
Evaluate the selector with the file.
Calculate timestamp as millis either based on millis or dateTime (and pattern) attribute.
evaluate the condition
Evaluate the condition.
Returns <code>true</code> if the file exists and is signed with the signature specified, or, if <code>name</code> wasn't specified, if the file contains a signature.
Returns <code>true</code> if the file exists and is signed with the signature specified, or, if <code>name</code> wasn't specified, if the file contains a signature.
Set the regular expression to match against
Constructor that sets the family attribute
Sets the desired OS family type
Sets the desired OS name
Sets the desired OS architecture
Sets the desired OS version
Get our reader
Set a feature
Set a property
Evaluates the condition.
Add a resource collection.
test for a task or other ant type existing in the current project
Evaluate the contained conditions.
Get a list of rcs entries as an array.
Process a line while in "GET_COMMENT" state.
Process a line while in "GET_PREVIOUS_REVISION" state.
Utility method that saves the current entry.
Add a user to list changelog knows about.
Set the number of days worth of log entries to process.
Adds a set of files about which cvs logs will be generated.
Execute task
Filter the specified entries according to an appropriate rule.
Print changelog to file specified in task.
Print out an individual entry in changelog.
Adds a file to the CVSEntry
Adds a file to the CVSEntry
Execute task.
Parse the tmpFile and return and array of CvsTagEntry to be written in the output.
Write the rdiff log.
Write a single entry to the given writer.
collects package names from the package attribute and nested module elements.
Gets a String containing filename and difference from previous version
Find out if the server version supports log with S option
the execute method running CvsVersion
Logs a line to the log system of ant.
Creates a new email address based on the given string
A specialised trim() that trims whitespace, '(', ')', '"', '<', '>' from the start and end of strings
Set the preferred encoding method.
Shorthand method to set the message.
Shorthand method to set the message from a file.
Add a replyto address element.
Shorthand to set the replyto address element.
Add a to address element.
Shorthand to set the "to" address element.
Add a "cc" address element.
Shorthand to set the "cc" address element.
Add a "bcc" address element.
Shorthand to set the "bcc" address element.
Set the list of files to be attached.
Add a set of files (nested fileset attribute).
Create a nested header element.
Send an email.
Creates a new message based on the given string
Adds a textual part of the message
Prints the message onto an output stream
Attaches a file to this email
Launches the given command in a new process.
Obtains the shell launcher configured for the given project or the default shell launcher.
Obtains the VM launcher configured for the given project or the default VM launcher.
Sets the VM launcher to use for the given project.
Sets the shell launcher to use for the given project.
Launches the given command in a new process, in the given working directory.
Launches the given command in a new process, in the given working directory.
Launches the given command in a new process, in the given working directory.
Launches the given command in a new process, in the given working directory.
Launches the given command in a new process.
Launches the given command in a new process, in the given working directory. Note that under Java 1.4.0 and 1.4.1 on VMS this method only works if <code>workingDir</code> is null or the logical JAVA$FORK_SUPPORT_CHDIR needs to be set to TRUE.
Launches the given command in a new process, in the given working directory.
Constructor for ANTLR task. 
The grammar file to process.
The directory to write the generated files to.
Sets an optional super grammar file. Use setGlib(File superGrammar) instead.
Adds the jars or directories containing Antlr this should make the forked JVM work without having to specify it directly.
Search for the given resource and add the directory or archive that contains it to the classpath. <p>Doesn't work for archives in JDK 1.1 as the URL returned by getResource doesn't contain the name of the archive.</p>
Execute the task.
A refactored method for populating all the command line arguments based on the user-specified attributes.
execute in a forked VM 
Adds a set of files to archive.
Create a new exec delegate.  The delegate task is populated so that it appears in the logs to be the same task as this one.
Check to see if the target is up to date with respect to input files.
Creates a list file.  This temporary file contains a list of all files to be included in the cab, one file per line. <p>This method expects to only be called on Windows and thus quotes the file names.</p>
Append all files found by a directory scanner to a vector.
Get the complete list of files to be included in the cab.  Filenames are gathered from the fileset if it has been added, otherwise from the traditional include parameters.
execute this task.
If the prefix is set, then only properties which start with this prefix string will be recorded. If regex is not set and  if this is never set, or it is set to an empty string or <tt>null</tt>, then all properties will be recorded. <P> For example, if the attribute is set as: <PRE>&lt;echoproperties  prefix="ant." /&gt;</PRE> then the property "ant.home" will be recorded, but "ant-example" will not.
If the regex is set, then only properties whose names match it will be recorded.  If prefix is not set and if this is never set, or it is set to an empty string or <tt>null</tt>, then all properties will be recorded.<P> For example, if the attribute is set as: <PRE>&lt;echoproperties  prefix=".*ant.*" /&gt;</PRE> then the properties "ant.home" and "user.variant" will be recorded, but "ant-example" will not.
A set of properties to write.
Set the output format - xml or text.
Run the task.
Send the key/value pairs in the hashtable to the given output stream. Only those properties matching the <tt>prefix</tt> constraint will be sent to the output stream. The output stream will be closed when this method returns.
Output the properties as xml output.
Adds class to process.
Add a fileset.
Names of the classes to process.
Adds a reference to a classpath defined elsewhere.
To the bootstrap path, this adds a reference to a classpath defined elsewhere.
Choose the implementation for this particular task.
Adds an implementation specific command-line argument.
Execute the task
Logs the compilation parameters, adds the files to compile and logs the &quot;niceSourceList&quot;
Logs the compilation parameters, adds the files to compile and logs the &quot;niceSourceList&quot;
Choose the implementation for this particular task.
A nested filenamemapper
Adds an implementation specific command-line argument.
Execute the task
Convert a single file.
Whether the generated java code is produced. This is not implemented yet.
Turns on or off tracing and directs the resultant trace output Valid values are: "trace", "trace1", "trace2" and "notrace". "trace" and "trace2".
Turns on or off tracing and directs the resultant trace output Valid values are: "trace", "trace1", "trace2" and "notrace". "trace" and "trace2".
Whether lots of warnings and error messages should be generated
Whether lots of warnings and error messages should be generated
init-Method sets defaults from Properties. That way, when ant is called with arguments like -Dant.netrexxc.verbose=verbose5 one can easily take control of all netrexxc-tasks.
Executes the task - performs the actual compiler call.
Copy eligible files from the srcDir to destDir  
Rename .java.keep files (back) to .java. The netrexxc renames all .java files to .java.keep if either -keep or -nocompile option is set.
Performs a compile using the NetRexx 1.1.x compiler  
Builds the compilation classpath.  
This  
Takes a classpath-like string, and adds each element of this string to a new classpath, if the components exist. Components that don't exist, aren't added. We do this, because jikes issues warnings for non-existent files/dirs in his classpath, and these warnings are pretty annoying.
Execute the task.
The entry nested element.
Creates new RenameExtensions 
Executes the task.
the regular expression pattern to match in the file(s); required if no nested &lt;regexp&gt; is used
The substitution pattern to place in the file(s) in place of the regular expression. Required if no nested &lt;substitution&gt; is used
Process the file(s) one line at a time, executing the replacement on one line at a time.  This is useful if you want to only replace the first occurrence of a regular expression on each line, which is not easy to do when processing the file as a whole. Defaults to <i>false</i>.
list files to apply the replacement to
Support arbitrary file system based resource collections.
Invoke a regular expression (r) on a string (input) using substitutions (s) for a matching regex.
Perform the replacement on a file
Execute the task
Execute the task
Checks whether <code>rpmbuild</code> is on the PATH and returns the absolute path to it - falls back to <code>rpm</code> otherwise.
Get the execute object.
Called by the project to let the task initialize properly. The default implementation is a no-op.
set nonamespace handling up for xerces or other parsers
add the schema
create a schema location to hold the anonymous schema
identify the URL of the default schema
identify a file containing the default schema
init the parser : load the parser class, and set features if necessary It is only after this that the reader is valid
Create a reader if the use of the class did not specify another one. The reason to not use  {@link org.apache.tools.ant.util.JAXPUtils#getXMLReader()} was tocreate our own factory with our own options.
build a string list of all schema locations, then set the relevant property.
handler called on successful file validation.
Set the project.
Run the script using the helper object.
Defines the manager.
Defines the language (required).
Load the script from an external file ; optional.
Set the script text.
Set the classpath to be used when searching for classes and resources.
Set the classpath by reference.
Set the setbeans attribute. If this is true, &lt;script&gt; will create variables in the script instance for all properties, targets and references of the current project. It this is false, only the project and self variables will be set. The default is true.
Set the stylesheet file.
Transform an input file.
Get the source instance from the stream and id of the file.
Create a new transformer based on the liaison settings
Sets the parameters for the transformer.
return the Transformer factory associated to this liaison.
Set a custom attribute for the JAXP factory implementation.
Set a custom feature for the JAXP factory implementation.
Set the output property for the current transformer. Note that the stylesheet must be set prior to calling this method.
Add a parameter.
Add a parameter.
Log an error.
Log a fatal error.
Log a warning.
Specific configuration for the TRaX liaison.
Where to find the parser class; optional.
add an XMLCatalog as a nested element; optional.
specify a set of file to be checked
Add an attribute nested element. This is used for setting arbitrary features of the SAX parser. Valid attributes <a href= "http://www.saxproject.org/apidoc/org/xml/sax/package-summary.html#package_description" >include</a>
Creates a property.
Called by the project to let the task initialize properly.
Create a DTD location record; optional. This stores the location of a DTD. The DTD is identified by its public Id.
handler called on successful file validation.
init the parser : load the parser class, and set features if necessary It is only after this that the reader is valid
create the XML reader. This is one by instantiating anything specified by  {@link #readerClassName}, falling back to a default reader if not. If the returned reader is an instance of  {@link ParserAdapter} thenwe have created and wrapped a SAX1 parser.
Cleans up resources.
Returns a SAX-based XMLReader or a SAX-based Parser.
Set a feature on the parser.
parse the file
Builds the compilation classpath.
Setup rmic argument for rmic.
This is an override point; get the stub version off the rmic command and translate that into a compiler-specific argument
Strip out all -J args from the command list. Invoke this from {@link #preprocessCompilerArgs(String[])} if you have a non-forkingcompiler.
Logs the compilation parameters, adds the files to compile and logs the &quot;niceSourceList&quot;
exec by creating a new command
{@inheritDoc} 
Run the rmic compiler.
Carry out the rmic compilation.
This is an override point; no stub version is returned. If any stub option is set, a warning is printed.
Create a normal command line, then with -Xnew at the front
{@inheritDoc}. 
Set the project.
Get our script runner
Load the script from an external file ; optional.
The script text.
Defines the manager.
Defines the language (required).
Initialize the script runner. Calls this before running the system
Set the classpath to be used when searching for classes and resources.
Set the classpath by reference.
Run a script
Set the setbeans attribute. If this is true, &lt;script&gt; will create variables in the script instance for all properties, targets and references of the current project. It this is false, only the project and self variables will be set. The default is true.
Is this condition true?
Set the project.
Defines the language (required).
Initialize.
Called filter the token. This sets the token in this object, calls the script and returns the token.
Load the script from an external file ; optional.
The script text.
Defines the manager.
Set the classpath to be used when searching for classes and resources.
Set the classpath by reference.
Set the setbeans attribute. If this is true, &lt;script&gt; will create variables in the script instance for all properties, targets and references of the current project. It this is false, only the project and self variables will be set. The default is true.
Add a mapped name
Returns an array containing the target filename(s) for the given source file. <p/> <p>if the given rule doesn't apply to the source file, implementation must return null. SourceFileScanner will then omit the source file in question.</p>
Set the project.
Defines the manager.
Defines the language (required).
Initialize on demand.
Load the script from an external file ; optional.
The script text.
Set the classpath to be used when searching for classes and resources.
Set the classpath by reference.
Set the setbeans attribute. If this is true, &lt;script&gt; will create variables in the script instance for all properties, targets and references of the current project. It this is false, only the project and self variables will be set. The default is true.
Method that each selector will implement to create their selection behaviour. If there is a problem with the setup of a selector, it can throw a BuildException to indicate the problem.
XMLCatalog calls this to add an external catalog file for each file within a <code>&lt;catalogfiles&gt;</code> fileset.
Set the classpath to use when looking up a resource.
Add a classpath to use when looking up a resource.
Set the classpath to use when looking up a resource, given as reference to a &lt;path&gt; defined elsewhere
get the classpath used by this <code>LoadProperties</code>.
Get the loader.
Use the reference to locate the loader. If the loader is not found, taskdef will use the specified classpath and register it with the specified name. This allow multiple taskdef/typedef to use the same class loader, so they can be used together. It eliminate the need to put them in the CLASSPATH.
Learn whether this resource exists. This implementation opens the input stream as the test.
Return an InputStream for reading the contents of this Resource.
combines the various ways that could specify a ClassLoader and potentially creates one that needs to be cleaned up when it is no longer needed so that classes can get garbage collected.
Add a ResourceCollection to the container.
Fulfill the ResourceCollection contract.
Take all elements except for the first <code>count</code> elements.
Take all elements except for the last <code>count</code> elements.
Construct a ArchiveResource representing the specified entry in the specified archive.
Construct a ArchiveResource representing the specified entry in the specified archive.
Set the archive that holds this Resource.
Sets the file or dir mode for this resource.
Sets the archive that holds this as a single element Resource collection.
Get the last modified date of this Resource.
Get the size of this Resource.
Learn whether this Resource represents a directory.
Find out whether this Resource represents an existing Resource.
Get the file or dir mode for this Resource.
Compare another Object to this ArchiveResource for equality.
Validate settings and ensure that the represented "archive entry" has been established.
Wrapper to identify nested resource collections as ZIP archives.
Wrapper to identify nested resource collections as ZIP archives.
Sums the sizes of nested archives.
Merges the nested collections.
Turns all nested resources into corresponding ArchiveFileSets and returns an iterator over the collected archives.
Configures the archivefileset based on this type's settings, set the source.
Create a new BaseResourceCollectionContainer.
Clear the container.
Add a ResourceCollection to the container.
Fulfill the ResourceCollection contract. The Iterator returned will throw ConcurrentModificationExceptions if ResourceCollections are added to this container while the Iterator is in use.
Fulfill the ResourceCollection contract.
Fulfill the ResourceCollection contract.
Get the nested ResourceCollections.
Fulfill the ResourceCollection contract.
Compress on the fly using  {@link CBZip2OutputStream}.
Constructor with another resource to wrap.
Get an InputStream for the Resource.
Get an OutputStream for the Resource.
Calculate the difference of the nested ResourceCollections.
Invalidate any in-use Iterators from the specified Object.
Construct a new FailFast Iterator wrapping the specified Iterator and dependent upon the specified parent Object.
Fulfill the Iterator contract.
Fulfill the Iterator contract.
Construct a new FileResource using the specified basedir and relative name.
Construct a new FileResource from a File.
Create a new FileResource.
Set the File for this FileResource.
Get the file represented by this FileResource.
Set the basedir for this FileResource.
Return the basedir to which the name is relative.
Get the name of this FileResource.  If the basedir is set, the name will be relative to that.  Otherwise the basename only will be returned.
Compare this FileResource to another Resource.
Compare another Object to this FileResource for equality.
Get the string representation of this Resource.
Fulfill the ResourceCollection contract.
Implement the Touchable interface.
Get the file represented by this FileResource, ensuring it is not null.
Create a new resource that matches a relative or absolute path. If the current instance has a compatible baseDir attribute, it is copied.
Construct a new FileResourceIterator over the specified filenames, relative to the specified base directory.
Add an array of filenames to this FileResourceIterator.
Convenience method to return the next resource.
Construct a new <code>Files</code> collection, shallowly cloned from the specified <code>Files</code>.
Create a nested patternset.
Append <code>includes</code> to the current list of include patterns. <p>Patterns may be separated by a comma or a space.</p>
Append <code>includes</code> to the current list of include patterns.
Append <code>excludes</code> to the current list of exclude patterns. <p>Patterns may be separated by a comma or a space.</p>
Append <code>excludes</code> to the current list of include patterns.
Set the <code>File</code> containing the includes patterns.
Set the <code>File</code> containing the excludes patterns.
Set whether default exclusions should be used or not.
Set case-sensitivity of the Files collection.
Set whether or not symbolic links should be followed.
Fulfill the ResourceCollection contract.
Fulfill the ResourceCollection contract.
Find out whether this Files collection has patterns.
Format this Files collection as a String.
Create a deep clone of this instance, except for the nested selectors (the list of selectors is a shallow clone of this instance's list).
Get the merged patterns for this Files collection.
Take the first <code>count</code> elements.
Calculate the intersection of the nested ResourceCollections.
open the input stream from a specific classloader
Construct a new JavaResource using the specified name and classpath.
open the input stream from a specific classloader
Get the URL represented by this Resource.
Take the last <code>count</code> elements.
Maps the name.
Equality check based on the resource's name in addition to the resource itself.
Adds the required nested ResourceCollection.
Define the mapper to map source to destination files.
Add a nested filenamemapper.
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Format this resource collection as a String.
Adds a basedir as nested element.
Construct a new PropertyResource with the specified name.
Get the value of this PropertyResource.
Get the Object value of this PropertyResource.
Get the size of this Resource.
Get an InputStream for the Resource.
Get the referenced or proxied Resource, if applicable.
Constructor with another resource to wrap.
Sets the resource to wrap using a single-element collection.
De-references refids if any, ensures a wrapped resource has been specified.
Adds a source.
Adds a FilterChain.
Create a new Resources.
Add a ResourceCollection.
Fulfill the ResourceCollection contract.
Fulfill the ResourceCollection contract.
Fulfill the ResourceCollection contract.
Format this <code>Resources</code> as a String.
Allow subclasses to notify existing Iterators they have experienced concurrent modification.
Add the ResourceCollection.
Set whether to cache collections.
Add a ResourceSelector.
Fulfill the ResourceCollection contract.
Fulfill the ResourceCollection contract.
Fulfill the ResourceCollection contract.
Format this Restrict collection as a String.
Set the number of resources to be included.
Efficient size implementation.
Sort the contained elements.
Add a ResourceComparator to this Sort ResourceCollection. If multiple ResourceComparators are added, they will be processed in LIFO order.
Overrides the BaseResourceCollectionContainer version to recurse on nested ResourceComparators.
Construct a StringResource with the supplied project and value, doing property replacement against the project if non-null.
The value attribute is a semantically superior alias for the name attribute.
Add nested text to this resource. Properties will be expanded during this process.
Set the encoding to be used for this StringResource.
This method is only for use by our private helper output stream. It contains specific logic for expanding properties.
Construct a TarResource representing the specified entry in the specified archive.
Construct a TarResource representing the specified entry in the specified archive.
Return an InputStream for reading the contents of this Resource.
fetches information from the named entry inside the archive.
Sort the contained elements.
Add the nested Tokenizer to this Tokens ResourceCollection. A LineTokenizer will be used by default.
Overrides the BaseResourceCollectionContainer version to check the nested Tokenizer.
Convenience constructor.
Returns all Resources in String format. Provided for convenience in implementing Path.
Convenience method.
Get a collection of strings representing the unified resource set (strings may duplicate).
Get the unified set of contained Resources.
Convenience constructor.
Convenience constructor.
Convenience constructor.
Set the URL for this URLResource.
Base URL which combined with the relativePath attribute defines the URL.
Relative path which combined with the baseURL attribute defines the URL.
Get the name of this URLResource (its file component minus the leading separator).
Test whether an Object equals this URLResource.
Get an InputStream for the Resource.
Get an OutputStream for the Resource.
Ensure that we have a connection.
Ensure that we have a connection.
Construct a ZipResource representing the specified entry in the specified zipfile.
Set the zipfile that holds this ZipResource.
Get the zipfile that holds this ZipResource.
Set the encoding to use with the zipfile.
Return an InputStream for reading the contents of this Resource.
Retrieves extra fields.
fetches information from the named entry inside the archive.
Indicates whether there are any selectors here.
Gives the count of the number of selectors in this container
Returns the set of selectors as an array.
Returns an enumerator for accessing the set of selectors.
Convert the Selectors within this container to a string. This will just be a helper class for the subclasses that put their own name around the contents listed here.
Add a new selector into this container.
add a "Select" selector entry on the selector list
add an "And" selector entry on the selector list
add an "Or" selector entry on the selector list
add a "Not" selector entry on the selector list
add a "None" selector entry on the selector list
add a majority selector entry on the selector list
add a selector date entry on the selector list
add a selector size entry on the selector list
add a selector filename entry on the selector list
add an extended selector entry on the selector list
add a contains selector entry on the selector list
add a present selector entry on the selector list
add a depth selector entry on the selector list
add a depends selector entry on the selector list
adds a different selector to the selector list
adds a type selector to the selector list
add a regular expression selector entry on the selector list
add the modified selector
add an arbitrary selector
Returns true (the file is selected) only if all other selectors agree that the file should be selected.
Subclasses can use this to throw the requisite exception in isSelected() in the case of an error condition.
Indicates whether there are any selectors here.
Gives the count of the number of selectors in this container
Returns the set of selectors as an array.
Returns an enumerator for accessing the set of selectors.
Convert the Selectors within this container to a string. This will just be a helper class for the subclasses that put their own name around the contents listed here.
Add a new selector into this container.
Checks that an expression was specified.
Tests a regular expression against each line of text in a Resource.
Checks to make sure all settings are kosher. In this case, it means that the pattern attribute has been set.
The heart of the matter. This is where the selector gets to decide on the inclusion of a Resource.
Creates a new <code>DateSelector</code> instance.
Returns the millisecond value the selector is set for.
Sets the type of comparison to be done on the file's last modified date.
This is a consistency check to ensure the selector's required values have been set.
The heart of the matter. This is where the selector gets to decide on the inclusion of a file in a particular fileset.
this test is our selection test that compared the file with the destfile
Checks to make sure all settings are kosher. In this case, it means that the max depth is not lower than the min depth.
The heart of the matter. This is where the selector gets to decide on the inclusion of a file in a particular fileset. Most of the work for this selector is offloaded into SelectorUtils, a static class that provides the same services for both FilenameSelector and DirectoryScanner.
Create new parameters to pass to custom selector.
Set the classpath to use for loading a custom selector by using a reference.
These are errors specific to ExtendSelector only. If there are errors in the custom selector, it should throw a BuildException when isSelected() is called.
Allows the custom selector to choose whether to select a file. This is also where the Parameters are passed to the custom selector, since we know we must have them all by now. And since we must know both classpath and classname, creating the class is deferred to here as well.
The name of the file, or the pattern for the name, that should be used for selection.
Checks to make sure all settings are kosher. In this case, it means that the name attribute has been set.
The heart of the matter. This is where the selector gets to decide on the inclusion of a file in a particular fileset. Most of the work for this selector is offloaded into SelectorUtils, a static class that provides the same services for both FilenameSelector and DirectoryScanner.
Returns true (the file is selected) if most of the other selectors agree. In case of a tie, go by the allowtie setting. That defaults to true, meaning in case of a tie, the file is selected.
Checks to make sure all settings are kosher. In this case, it means that the dest attribute has been set and we have a mapper.
The heart of the matter. This is where the selector gets to decide on the inclusion of a file in a particular fileset.
Returns true (the file is selected) only if all other selectors agree that the file should not be selected.
Constructor that inverts the meaning of its argument.
Makes sure that there is only one entry, sets an error message if not.
Returns true (the file is selected) if any of the other selectors agree that the file should be selected.
Checks to make sure all settings are kosher. In this case, it means that the targetdir attribute has been set and we have a mapper.
The heart of the matter. This is where the selector gets to decide on the inclusion of a file in a particular fileset.
Tests whether or not a given path matches the start of a given pattern up to the first "**". <p> This is not a general purpose test and should only be used if you can live with false positives. For example, <code>pattern=**\a</code> and <code>str=b</code> will yield <code>true</code>.
Tests whether or not a given path matches a given pattern. If you need to call this method multiple times with the same pattern you should rather use TokenizedPath
Tests whether or not a given path matches a given pattern. If you need to call this method multiple times with the same pattern you should rather use TokenizedPattern
Tests whether or not a string matches against a pattern. The pattern may contain two special characters:<br> '*' means zero or more characters<br> '?' means one and only one character
Breaks a path up into a Vector of path elements, tokenizing on
Same as  {@link #tokenizePath tokenizePath} but hopefully faster.
Returns dependency information on these two resources. If src has been modified later than target, it returns true. If target doesn't exist, it likewise returns true. Otherwise, target is newer than src and is not out of date, thus the method returns false. It also returns false if the src file doesn't even exist, since how could the target then be out of date.
"Flattens" a string by removing all whitespace (space, tab, linefeed, carriage return, and formfeed). This uses StringTokenizer and the default set of tokens as documented in the single argument constructor.
Performs the check for circular references and returns the referenced Selector.
Makes sure that there is only one entry, sets an error message if not.
Ensures that the selector passes the conditions placed on it with <code>if</code> and <code>unless</code>.
Sets the if attribute to an expression which must evaluate to true or the name of an existing property for the selector to select any files.
Sets the unless attribute to an expression which must evaluate to false or the name of a property which cannot exist for the selector to select any files.
Returns true (the file is selected) only if the if property (if any) exists, the unless property (if any) doesn't exist, and the contained selector (if any) selects the file. If there is no contained selector, return true (because we assume that the point was to test the if and unless conditions).
The signature name to check jarfile for.
The heart of the matter. This is where the selector gets to decide on the inclusion of a file in a particular fileset.
Returns a <code>String</code> object representing the specified SizeSelector. This is "{sizeselector value: " + <"compare", "less", "more", "equal"> + "}".
Sets the units to use for the comparison. This is a little complicated because common usage has created standards that play havoc with capitalization rules. Thus, some people will use "K" for indicating 1000's, when the SI standard calls for "k". Others have tried to introduce "K" as a multiple of 1024, but that falls down when you reach "M", since "m" is already defined as 0.001. <p> To get around this complexity, a number of standards bodies have proposed the 2^10 standard, and at least one has adopted it. But we are still left with a populace that isn't clear on how capitalization should work. <p> We therefore ignore capitalization as much as possible. Completely mixed case is not possible, but all upper and lower forms are accepted for all long and short forms. Since we have no need to work with the 0.001 case, this practice works here. <p> This function translates all the long and short forms that a unit prefix can occur in and translates them into a single multiplier.
The heart of the matter. This is where the selector gets to decide on the inclusion of a file in a particular fileset.
Creates a new path as a child of another path.
From <code>base</code> traverse the filesystem in order to find a file that matches the given name.
Returns a new TokenizedPath where all tokens of this pattern to the right containing wildcards have been removed
Set the type of file to require.
Checks to make sure all settings are kosher. In this case, it means that the pattern attribute has been set.
The heart of the matter. This is where the selector gets to decide on the inclusion of a file in a particular fileset.
Set the provider classname.
Add a nested provider element.
Return the implementations of this services as an inputstream.
Setup the analyzer 
Get the list of files in the file system upon which the root classes depend. The files will be either the classfiles or jar files upon which the root classes depend.
Get the list of classes upon which root classes depend. This is a list of Java classnames in dot notation.
Add a source path to the source path used by this analyzer. The elements in the given path contain the source files for the classes being analyzed. Not all analyzers will use this information.
Add a classpath to the classpath being used by the analyzer. The classpath contains the binary classfiles for the classes being analyzed The elements may either be the directories or jar files.Not all analyzers will use this information.
Add a root class. The root classes are used to drive the determination of dependency information. The analyzer will start at the root classes and add dependencies from there.
Reset the dependency list. This will reset the determined dependencies and the also list of root classes.
Command line argument.
Retrieves the command line arguments enabled for the current facade implementation.
Get the diagnostics for proxy information.
{@inheritDoc}. 
Do the work to run the script.
Do the work to eval the script.
Traverse a Throwable's cause(s) and return the BuildException most deeply nested into it - if any.
Check if bsf supports the language.
Do the work.
Evaluate the script.
Get/create a BuildException from a BSFException.
Does the given argument match the pattern?
Returns a Vector of matched groups found in the argument. <p>Group 0 will be the full match, the rest are the parenthesized subexpressions</p>.
Perform a substitution on the regular expression.
Convert ant regexp substitution option to oro options.
Returns a Vector of matched groups found in the argument. <p>Group 0 will be the full match, the rest are the parenthesized subexpressions</p>.
Perform a substitution on the regular expression.
Returns a Vector of matched groups found in the argument. <p>Group 0 will be the full match, the rest are the parenthesized subexpressions</p>.
Perform a substitution on the regular expression.
Executes a target and checks the beginning and the ending of a file. The filename depends on the target name: target name <i>testHelloWorld</i> will search for a file <i>result/concat.HelloWorld.test</i>.
make sure tokenfilter exists 
expect a uri to resolve to strings on different platforms
Assert something resolved
This asserts that we can round trip the path to a URI and back again
this isnt really a valid URI, except maybe in IE
Bug 42275; Ant failing to run off a remote share
Bug 42275; Ant failing to run off a remote share
only do the antlib tests if we are in the same JVM as ant.
Confirms that all matching resources will be used, so that you can collect several antlibs in one Definer call.
Test set up, called by the unit test framework prior to each test.
Test tear down, called by the unit test framework prior to each test.
Cats the string 'Hello, World!' to a temporary file.
Cats the file created in test3 three times.
Cats the string 'Hello, World!' to the console.
Check if filter inline works
Check if multireader works
Check if fixlastline works
Check if fixlastline works with eol
The JUnit setup method
The teardown method for JUnit
Dangerous method to obtain the classpath for the test. This is severely tighted to the build.xml properties.
Dangerous method to obtain the classpath for the test. This is severely tied to the build.xml properties.
see that the different combinations work, and that the autogenerated text contains information about which condition was not met
see that the different combinations work, and that the autogenerated text contains information about which condition was not met
Bugzilla Report 20840 Will fail with an exception if the parent directories do not get created.
Test setting the name of the javac executable.
Test nested compiler args.
Test nested compiler args in the fork="true" and implementation="extJavac" case.
Test compiler attribute.
configure the project. if the property junit.run.fatal.tests is set we run the fatal tests
this test fails but we ignore the return value; we verify that failure only matters when failonerror is set
A unit test for JUnit
A unit test for JUnit
A unit test for JUnit
A unit test for JUnit
Test FilterChain and FilterReaders
Test StripJavaComments filterreader functionality.
test that we can round trip by opening a url that exists
assert that a property ends with
assert that a property contains a string
Empty manifest - is OK
Simple Manifest with version 2.0
Malformed manifest - Name attribute in main section
New Section not starting with Name attribute.
From attribute is illegal
Inline manifest - OK
Inline manifest - OK since classpath entries can be duplicated.
Tets long line wrapping
Tests ordering of sections
Tests ordering of sections
replace changes Manifest-Version from 2.0 to 1.0
update keeps the Manifest-Version and adds a new attribute Foo
Reads mftest.mf.
Bugzilla Report 11732 
Bugzilla Report 18886 
The JUnit setup method 
tests basic operation of the parallel task 
tests basic operation of the parallel task 
the test result string should match the regex <code>^(\|\d+\/(+-)*)+\|$</code> for someting like <code>|3/++--+-|5/+++++-----|</code>
tests the failure of a task within a parallel construction 
tests the demuxing of output streams in a multithreaded situation 
The JUnit setup method
verify that "default" binds us to the default compiler
verify that "default" binds us to the default compiler
verify that "" binds us to the default compiler
verify that "" binds us to the default compiler
test sun's rmic compiler
test sun's rmic compiler
test sun's rmic compiler strips out -J arguments when not forking
test sun's rmic compiler strips out -J arguments when not forking
A unit test for JUnit
A unit test for JUnit
test weblogic
test weblogic's stripping of -J args
test the forking compiler
test the forking compiler
test the forking compiler
test the forking compiler
test the forking compiler
load an adapter by name
A unit test for JUnit
test that version 1.1 stubs are good
test that version 1.1 stubs are good
test that version 1.2 stubs are good
test that version 1.2 stubs are good
test that version compat stubs are good
test that version compat stubs are good
test that passes -Xnew to sun's rmic running in a different VM.
test that passes -Xnew to sun's rmic running in a different VM.
test that runs the new xnew compiler adapter.
test that runs the new xnew compiler adapter.
test that verifies that IDL compiles.
test that verifies that IDL compiles.
test that verifies that IIOP compiles.
test that verifies that IIOP compiles.
Test nested compiler args.
Test compiler attribute.
run a sql tasks multiple times.
Create a task from a set of properties
try to find the path from a resource (jar file or directory name) so that it can be used as a classpath to load the resource.
returns a configuration associated to a specific database. If you want to test on your specific base, you'd better tweak this to make it run or add your own database. The driver lib should be dropped into the system classloader.
helper method to build properties 
No real test, simply checks whether the dateformat without seconds is accepted - by erroring out otherwise.
No real test, simply checks whether the dateformat with seconds is accepted - by erroring out otherwise.
verify that the millis test sets things up
verify that the default value defaults to now
verify that the millis test sets things up
test the file list
test the file set
test the resource collection
test the mapped file set
test the explicit mapped file set
test the mapped file list
test the pattern attribute
run a target to touch the test file; verify the timestamp is as expected
assert that two times are within the current FS granularity;
assert that two times are within a specified range
verifies that custom props have priority over the originals
verifies that custom props have priority over the originals
test to make sure that one can define a not present optional type twice and then have a valid definition.
test that the logo gif file has not been corrupted
assert that a file exists, relative to the project
assert that a file doesnt exist, relative to the project
PR 21996
Test direct dependency removal
Actually run a test, finding all input files (and corresponding goldfile)
Make sure every property loaded from the goldfile was also read from the XmlProperty.  We could try and test the other way, but some other properties may get set in the XmlProperty due to generic Project/Task configuration.
Debugging method to print the properties in the given hashtable
Ensure all references loaded by the project are valid.
Munge the name of the input file to find an appropriate goldfile, based on hardwired naming conventions.
Retrieve a list of xml files in the specified folder and below.
Collect a list of xml files in the specified folder and below.
This will test the recursive FilterSet.  Which means that if the filter value @test@ contains another filter value, it will actually resolve.
Test to see what happens when the resolving occurs in an infinite loop.
Test to see what happens when the resolving occurs in what would be an infinite loop, but with recursion disabled.
Tests a permission that is granted per default. 
Tests a permission that has been granted later via wildcard. 
Tests a permission that has been granted and revoked later. 
Tests a permission that is granted as per default but revoked later via wildcard. 
Tests a permission that has not been granted or revoked. 
Tests an exit condition. 
test modification. Since Ant1.7, the method being tested no longer uses reflection to provide backwards support to Java1.1, so this test is not so critical. But it does explore file system behaviour and will help catch any regression in Java itself, so is worth retaining.
Test handling of null arguments.
Test createTempFile
Test contentEquals
Test createNewFile
Test removeLeadingPath.
test toUri
test fromUri
convenience method normalize brings the drive in uppercase the drive letter is in lower case under cygwin calling this method allows tests where normalize is called to pass under cygwin
Tests that a properties file read by the LayoutPreservingPropertiesFile and then saves the properties in it.
Tests that names and value are properly escaped when being written out.
Tests that properties are correctly indexed, so that when we set an existing property, it updates the logical line, and it doesn't append a new one.
Sets the path to the file that the command will operate on.
Adds a set of files to copy.
Executes the task. <p> Builds a command line to execute ccm and then calls Exec's run method to execute the command line. </p>
check the file given by getFile().
Check the command line options.
Default constructor - setup checkin command
Constructor for CCMCheckinDefault. 
default constructor
Constructor for CCMCreateTask.
Executes the task. <p> Builds a command line to execute ccm and then calls Exec's run method to execute the command line. </p>
Check the command line options.
Constructor for CCMReconfigure. 
Executes the task. <p> Builds a command line to execute ccm and then calls Exec's run method to execute the command line. </p>
Check the command line options.
Set the directory where the ccm executable is located.
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Get the 'comment' command
Get the 'commentfile' command
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check to see if the element is checked out in the current view.
Check the command line options.
Get the 'out' command
Get the 'branch' command
Get the 'comment' command
Get the 'cfile' command
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Get the 'version' command
Get the 'comment' command
Get the 'commentfile' command
Get the attribute type-name
Get the attribute type-value
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Get the 'comment' command
Get the 'commentfile' command
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Get the 'comment' command
Get the 'commentfile' command
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Get the 'comment' command
Get the 'commentfile' command
Get the 'element type' command
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Get the 'version' command
Get the 'comment' command
Get the 'commentfile' command
Get the type-name
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Get the 'comment' command
Get the 'commentfile' command
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Get the 'comment' command
Get the 'commentfile' command
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Sets the object(s) to be locked
Sets the object(s) to be locked
Executes the task. <p> Builds a command line to execute cleartool and then calls Exec's run method to execute the command line.
Check the command line options.
Set the directory where the cleartool executable is located.
Execute the given command, and return it's output
Determine the dependencies of the configured root classes.
Read the class from a data stream. This method takes an InputStream as input and parses the class from the stream. <p>
Get the classes which this class references.
Adds a reference to a classpath defined elsewhere.
Read the dependencies from cache file
Get the classpath for dependency checking. This method removes the dest dirs if it is given from the dependency classpath
Determine the dependencies between classes. Class dependencies are determined by examining the class references in a class file to other classes. This method sets up the following fields <ul> <li>affectedClassMap - the list of classes each class affects</li> <li>classFileInfoMap - information about each class</li> <li>classpathDependencies - the list of jars and classes from the classpath that each class depends upon.</li> </ul> If required, the dependencies are written to the cache.
Delete all the class files of classes which depend on the given class
warn when a class is out of date, but not deleted as its source is unknown. MSG_WARN is the normal level, but we downgrade to MSG_VERBOSE for RMI files if  {@link #warnOnRmiStubs is false}
Dump the dependency information loaded from the classes to the Ant log
Get the list of class files we are going to analyse.
Find the source file for a given class
Add the list of class files from the given directory to the class file vector, including any subdirectories.
Creates a directory iterator. The directory iterator is created to scan the root directory. If the changeInto flag is given, then the entries returned will be relative to this directory and not the current directory.
Get a vector covering all the entries (files and subdirectories in a directory).
Template method to allow subclasses to supply elements for the iteration. The directory iterator maintains a stack of iterators covering each level in the directory hierarchy. The current iterator covers the current directory being scanned. If the next entry in that directory is a subdirectory, the current iterator is pushed onto the stack and a new iterator is created for the subdirectory. If the entry is a file, it is returned as the next element and the iterator remains valid. If there are no more entries in the current directory, the topmost iterator on the stack is popped off to become the current iterator.
Get the next ClassFile object from the jar
Get the borland descriptor handler.
Add any vendor specific files which should be included in the EJB Jar.
Verify the produced jar file by invoking the Borland verify tool
Verify the produced jar file by invoking the Borland iastool tool
Verify the produced jar file by invoking the Borland verify tool
Generate the client jar corresponding to the jar file passed as parameter the method uses the BorlandGenerateClient task.
Generate stubs & skeleton for each home found into the DD Add all the generate class file into the ejb files
Method used to encapsulate the writing of the JAR file. Iterates over the filenames/java.io.Files in the Hashtable stored on the instance variable ejbFiles.
convert a class file name : A/B/C/toto.class into    a class name: A.B.C.toto
convert a file name : A/B/C/toto.java into    a class name: A/B/C/toto.class
Set the error stream of the process.
Reference to existing path, to use as a classpath.
Do the work. The work is actually done by creating a separate JVM to run a java task.
launch the generate client using system api.
Register a dtd with a location. The location is one of a filename, a resource name in the classpath, or a URL.
Resolve the entity.
SAX parser call-back method that is invoked when an element is exited. Used to blank out (set to the empty string, not nullify) the name of the currentAttribute.  A better method would be to use a stack as an instance variable, however since we are only interested in leaf-node data this is a simpler and workable solution.
Add a deployment tool to the list of deployment tools that will be processed
Adds a deployment tool for Weblogic server.
Adds a deployment tool for Websphere 4.0 server.
Adds a deployment tool for Borland server.
Adds a deployment tool for iPlanet Application Server.
Adds a deployment tool for JBoss server.
Adds a deployment tool for JOnAS server.
Adds a deployment tool for Weblogic when using the Toplink Object-Relational mapping.
Create a DTD location record. This stores the location of a DTD. The DTD is identified by its public Id. The location may either be a file location or a resource location.
Adds a fileset for support elements.
Set the base name of the EJB JAR that is to be created if it is not to be determined from the name of the deployment descriptor files.
Sets the CMP version.
Validate the config that has been configured from the build file
Invoked by Ant after the task is prepared, when it is ready to execute this task. This will configure all of the nested deployment tools to allow them to process the jar. If no deployment tools have been configured a generic tool is created to handle the jar. A parser is configured and then each descriptor found is passed to all the deployment tool elements for processing.
Get the classpath by combining the one from the surrounding task, if any and the one from this tool.
Log a message to the Ant output.
Configure this tool for use in the ejbjar task.
Utility method that encapsulates the logic of adding a file entry to a .jar file.  Used by execute() to add entries to the jar file as it is constructed.
Get a descriptionHandler.
{@inheritDoc}. 
This method returns a list of EJB files found when the specified EJB descriptor is parsed and processed.
Adds any classes the user specifies using <i>support</i> nested elements to the <code>ejbFiles</code> Hashtable.
Get the manifest file to use for building the generic jar. If the file does not exist the global manifest from the config is used otherwise the default Ant manifest will be used.
Method used to encapsulate the writing of the JAR file. Iterates over the filenames/java.io.Files in the Hashtable stored on the instance variable ejbFiles.
Add all available classes, that depend on Remote, Home, Bean, PK
Returns a Classloader object which parses the passed in generic EjbJar classpath. The loader is used to dynamically load classes from javax.ejb.* and the classes being added to the jar.
Constructor of filter.
Since iAS doesn't generate a "generic" JAR as part of its processing, this attribute is ignored and a warning message is displayed to the user.
{@inheritDoc}. 
Verifies that the user selections are valid.
This method returns a list of EJB files found when the specified EJB descriptor is parsed and processed.
Add the iAS-specific EJB descriptor to the list of files which will be written to the JAR file.
Get the name of the Jar that will be written. The modification date of this jar will be checked against the dependent bean classes.
Determines the name of the iAS-specific EJB descriptor using the specified standard EJB descriptor name.  In general, the standard descriptor will be named "[basename]-ejb-jar.xml", and this method will return "[basename]-ias-ejb-jar.xml".
Constructs an instance which may be used to process EJB descriptors and generate EJB stubs and skeletons, if needed.
Registers the location of a local DTD file or resource.  By registering a local DTD, EJB descriptors can be parsed even when the remote servers which contain the "public" DTDs cannot be accessed.
Returns the list of CMP descriptors referenced in the EJB descriptors.
Main application method for the iPlanet Application Server ejbc utility. If the application is run with no commandline arguments, a usage statement is printed for the user.
Compiles the stub and skeletons for the specified EJBs, if they need to be updated.
Executes the iPlanet Application Server ejbc command-line utility.
Parses the EJB descriptors and returns a list of EJBs which may need to be compiled.
Based on this object's instance variables as well as the EJB to be processed, the correct flags and parameters are set for the ejbc command-line utility.
Does the work.
Returns a SAXParser that may be used to process the XML descriptors.
Executes the EJBc utility using the SAXParser provided.
Returns the CLASSPATH to be used when calling EJBc.  If no user CLASSPATH is specified, the System classpath is returned instead.
Add any vendor specific files which should be included in the EJB Jar.
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
Determines the name of the JOnAS-specific EJB descriptor using the specified standard EJB descriptor name. In general, the standard descriptor will be named "[basename]-ejb-jar.xml", and this method will return "[basename]-jonas-ejb-jar.xml" or "jonas-[basename].xml"
{@inheritDoc}. 
{@inheritDoc}. 
Add to the given hashtable all the file generated by GenIC.
Get the GenIC class name to use in the given classpath.
Delete a file. If the file is a directory, delete recursivly all the files inside.
Add a nested sysproperty element.
Controls whether weblogic will keep the generated Java files used to build the class files added to the jar. This can be useful when debugging; default is false.
Register the DTDs.
Get the weblogic descriptor handler.
Add any vendor specific files which should be included in the EJB Jar.
Helper method invoked by execute() for each WebLogic jar to be built. Encapsulates the logic of constructing a java task for calling weblogic.ejbc and executing it.
Method used to encapsulate the writing of the JAR file. Iterates over the filenames/java.io.Files in the Hashtable stored on the instance variable ejbFiles.
Helper method to check to see if a weblogic EBJ1.1 jar needs to be rebuilt using ejbc. Called from writeJar it sees if the "Bean" classes are the only thing that needs to be updated and either updates the Jar with the Bean classfile or returns true, saying that the whole weblogic jar needs to be regened with ejbc. This allows faster build times for working developers. <p> The way weblogic ejbc works is it creates wrappers for the publicly defined methods as they are exposed in the remote interface. If the actual bean changes without changing the the method signatures then only the bean classfile needs to be updated and the rest of the weblogic jar file can remain the same. If the Interfaces, ie. the method signatures change or if the xml deployment descriptors changed, the whole jar needs to be rebuilt with ejbc. This is not strictly true for the xml files. If the JNDI name changes then the jar doesn't have to be rebuild, but if the resources references change then it does. At this point the weblogic jar gets rebuilt if the xml files change at all.
Helper method invoked by isRebuildRequired to get a ClassLoader for a Jar File passed to it.
Get the descriptor handler.
Add any vendor specific files which should be included in the EJB Jar.
{@inheritDoc}. 
Get a description handler.
Add any vendor specific files which should be included in the EJB Jar.
Gets the options for the EJB Deploy operation
Helper method to check to see if a websphere EBJ1.1 jar needs to be rebuilt using ejbdeploy. Called from writeJar it sees if the "Bean" classes are the only thing that needs to be updated and either updates the Jar with the Bean classfile or returns true, saying that the whole websphere jar needs to be regened with ejbdeploy. This allows faster build times for working developers. <p> The way websphere ejbdeploy works is it creates wrappers for the publicly defined methods as they are exposed in the remote interface. If the actual bean changes without changing the the method signatures then only the bean classfile needs to be updated and the rest of the websphere jar file can remain the same. If the Interfaces, ie. the method signatures change or if the xml deployment descriptors changed, the whole jar needs to be rebuilt with ejbdeploy. This is not strictly true for the xml files. If the JNDI name changes then the jar doesn't have to be rebuild, but if the resources references change then it does. At this point the websphere jar gets rebuilt if the xml files change at all.
Helper method invoked by isRebuildRequired to get a ClassLoader for a Jar File passed to it.
Return an array of <code>Extension</code> objects representing optional packages that are available in the JAR file associated with the specified <code>Manifest</code>.  If there are no such optional packages, a zero-length array is returned.
Add Extension to the specified manifest Attributes.
Add Extension to the specified manifest Attributes. Use the specified prefix so that dependencies can added with a prefix such as "java3d-" etc.
Return a Compatibility enum indicating the relationship of this <code>Extension</code> with the specified <code>Extension</code>.
Return a String representation of this object.
Retrieve all the extensions listed under a particular key (Usually EXTENSION_LIST or OPTIONAL_EXTENSION_LIST).
Add required optional packages defined in the specified attributes entry, if any.
Splits the string on every token into an array of strings.
Extract an Extension from Attributes. Prefix indicates the prefix checked for each string. Usually the prefix is <em>"&lt;extension&gt;-"</em> if looking for a <b>Required</b> extension. If you are looking for an <b>Available</b> extension then the prefix is <em>""</em>.
Set the name of extension.
Set the specificationVersion of extension.
Set the specificationVendor of extension.
Set the implementationVendorID of extension.
Set the implementationVendor of extension.
Set the implementationVersion of extension.
Set the implementationURL of extension.
Convert this adpater object into an extension object.
Adds an extension that this library requires.
Adds a set of files about which extensions data will be extracted.
Adds a set of files about which extensions data will be extracted.
Extract a set of Extension objects from the ExtensionSet.
Convert a list of extensionAdapter objects to extensions.
Retrieve extensions from the specified libraries.
Load list of available extensions from specified file.
Add extension to list. If extension should not have implementation details but does strip them. If extension should not have url but does then strip it.
Retrieve manifest for specified file.
Adds a set of extensions to search in.
Execute the task.
Adds a set of files about which library data will be displayed.
Execute the task.
Adds an extension that this library implements.
Adds a set of extensions that this library requires.
Adds a set of extensions that this library optionally requires.
Adds an attribute that is to be put in main section of manifest.
Execute the task.
Add any extra attributes to the manifest.
Write out manifest to destfile.
Append specified extensions to specified attributes. Use the extensionKey to list the extensions, usually "Extension-List:" for required dependencies and "Optional-Extension-List:" for optional dependencies. NOTE: "Optional" dependencies are not part of the specification.
Append an attribute such as "Extension-List: lib0 lib1 lib2" using specified prefix and counting up to specified size. Also use specified extensionKey so that can generate list of optional dependencies as well.
Convert a list of ExtensionSet objects to extensions.
Adds location resolver to look for a library in a location relative to project directory.
Adds a URL resolver to download a library from a URL to a local file.
Adds Ant resolver to run an Ant build file to generate a library.
Set the Extension looking for.
Execute the task.
Utility method that will throw a  {@link BuildException}if  {@link #failOnError} is true else it just displaysa warning.
Check if specified file satisfies extension. If it does then set the relevant property else throw a BuildException.
Utility method to set the appropriate property to indicate that specified file satisfies library requirements.
Display the extensions and specifications contained within specified file.
Display the extensions and specifications contained within specified file.
Print out specification details.
Return an array of <code>Package Specification</code> objects. If there are no such optional packages, a zero-length array is returned.
The constructor to create Package Specification object. Note that every component is allowed to be specified but only the specificationTitle is mandatory.
Return an array containing sections to which specification applies or null if relevant to no sections.
Return a Compatibility enum indicating the relationship of this <code>Package Specification</code> with the specified <code>Extension</code>.
Return a String representation of this object.
Combine all specifications objects that are identical except for the sections. <p>Note this is very inefficent and should probably be fixed in the future.</p>
Merge the specified sections into specified section and return result. If no sections to be added then just return original specification.
Extract an Package Specification from Attributes.
Adds a set of files to translate as a nested fileset element.
Check attributes values, load resource map and translate
Load resource maps based on resource bundle encoding scheme. The resource bundle lookup searches for resource files with various suffixes on the basis of (1) the desired locale and (2) the default locale (basebundlename), in the following order from lower-level (more specific) to parent-level (less specific): basebundlename + "_" + language1 + "_" + country1 + "_" + variant1 basebundlename + "_" + language1 + "_" + country1 basebundlename + "_" + language1 basebundlename basebundlename + "_" + language2 + "_" + country2 + "_" + variant2 basebundlename + "_" + language2 + "_" + country2 basebundlename + "_" + language2 To the generated name, a ".properties" string is appeneded and once this file is located, it is treated just like a properties file but with bundle encoding also considered while loading.
Process each file that makes up this bundle.
Reads source file line by line using the source encoding and searches for keys that are sandwiched between the startToken and endToken.  The values for these keys are looked up from the hashtable and substituted.  If the hashtable doesn't contain the key, they key itself is used as the value. Detination files and directories are created as needed. The destination file is overwritten only if the forceoverwritten attribute is set to true if the source file or any associated bundle resource file is newer than the destination file.
Add a set of files to be deleted.
Add an ImageOperation to chain.
Add a Rotate ImageOperation to the chain.
Add a Scale ImageOperation to the chain.
Add a Draw ImageOperation to the chain.  DrawOperation DataType objects can be nested inside the Draw object.
Add an ImageOperation to chain.
Add a nested filenamemapper.
Executes all the chained ImageOperations on the files inside the directory.
Executes all the chained ImageOperations on the file specified.
Executes the Task.
Perform the actual deployment. For this generic implementation, a JVM is spawned using the supplied classpath, classname, JVM args, and command line arguments.
gets the classpath field.
Validates the passed in attributes. <p> The rules are: <ol> <li> If action is "deploy" or "update" the "application" and "source" attributes must be supplied. <li> If action is "delete" or "undeploy" the "application" attribute must be supplied.
Determines if the action supplied is valid. <p> Valid actions are contained in the static array VALID_ACTIONS
Creates a generic deployment tool. <p>Ant calls this method on creation to handle embedded "generic" elements in the ServerDeploy task.
Creates a WebLogic deployment tool, for deployment to WebLogic servers. <p>Ant calls this method on creation to handle embedded "weblogic" elements in the ServerDeploy task.
Creates a JOnAS deployment tool, for deployment to JOnAS servers. <p>Ant calls this method on creation to handle embedded "jonas" elements in the ServerDeploy task.
Execute the task. <p>This method calls the deploy() method on each of the vendor-specific tools in the <code>vendorTools</code> collection.  This performs the actual process of deployment on each tool.
Perform the actual deployment. For this implementation, a JVM is spawned and the weblogic.deploy tools is executed.
Validates the passed in attributes. <p>The rules are: <ol><li>If action is "deploy" or "update" the "application" and "source" attributes must be supplied. <li>If action is "delete" or "undeploy" the "application" attribute must be supplied.
Builds the arguments to pass to weblogic.deploy according to the supplied action.
Determines if the action supplied is valid. <p>Valid actions are contained in the static array VALID_ACTIONS
Builds the prefix arguments to pass to weblogic.deploy. These arguments are generic across all actions.
Builds the arguments to pass to weblogic.deploy for deployment actions ("deploy" and "update").
Sets the LOOKAHEAD grammar option.
Sets the CHOICE_AMBIGUITY_CHECK grammar option.
Sets the OTHER_AMBIGUITY_CHECK grammar option.
Sets the STATIC grammar option.
Sets the DEBUG_PARSER grammar option.
Sets the DEBUG_LOOKAHEAD grammar option.
Sets the DEBUG_TOKEN_MANAGER grammar option.
Sets the OPTIMIZE_TOKEN_MANAGER grammar option.
Sets the ERROR_REPORTING grammar option.
Sets the JAVA_UNICODE_ESCAPE grammar option.
Sets the UNICODE_INPUT grammar option.
Sets the IGNORE_CASE grammar option.
Sets the COMMON_TOKEN_ACTION grammar option.
Sets the USER_TOKEN_MANAGER grammar option.
Sets the USER_CHAR_STREAM grammar option.
Sets the BUILD_PARSER grammar option.
Sets the BUILD_TOKEN_MANAGER grammar option.
Sets the SANITY_CHECK grammar option.
Sets the FORCE_LA_CHECK grammar option.
Sets the CACHE_TOKENS grammar option.
Sets the KEEP_LINE_COLUMN grammar option.
Sets the JDK_VERSION option.
Constructor
Run the task.
Helper method to retrieve main class which is different from versions.
Determines the output Java file to be generated by the given grammar file.
Sets the TEXT BNF documentation option.
Sets the ONE_TABLE documentation option.
Constructor
Do the task.
Sets the BUILD_NODE_FILES grammar option.
Sets the MULTI grammar option.
Sets the NODE_DEFAULT_VOID grammar option.
Sets the NODE_FACTORY grammar option.
Sets the NODE_SCOPE_HOOK grammar option.
Sets the NODE_USES_PARSER grammar option.
Sets the STATIC grammar option.
Sets the VISITOR grammar option.
Sets the NODE_PACKAGE grammar option.
Sets the VISITOR_EXCEPTION grammar option.
Sets the NODE_PREFIX grammar option.
Constructor
Run the task.
When running JJTree from an Ant taskdesk the -OUTPUT_DIRECTORY must always be set. But when -OUTPUT_DIRECTORY is set, -OUTPUT_FILE is handled as if relative of this -OUTPUT_DIRECTORY. Thus when the -OUTPUT_FILE is absolute or contains a drive letter we have a problem.
Determine root directory for a given file.
Performs the actual compilation.
Performs the actual compilation.
Performs the actual compilation.
Performs the actual compilation.
Adds a reference to a classpath defined elsewhere.
The format to write the output in, "xml" or "text".
Search for the given resource and add the directory or archive that contains it to the classpath. <p>Doesn't work for archives in JDK 1.1 as the URL returned by getResource doesn't contain the name of the archive.</p>
execute the task
Execute inside VM.
Execute the task by forking a new JVM. The command will block until it finishes. To know if the process was destroyed or not, use the <tt>killedProcess()</tt> method of the watchdog class.
Create a constant pool.
Adds a file to be merged into the output.
Adds a file to be added into the output.
Adds several files to be merged into the output.
Adds several file to be added into the output.
Performs the linking of files. Addfiles are added to the output as-is. For example, a jar file is added to the output as a jar file. However, mergefiles are first examined for their type. If it is a jar or zip file, the contents will be extracted from the mergefile and entered into the output. If a zip or jar file is encountered in a subdirectory it will be added, not merged. If a directory is encountered, it becomes the root entry of all the files below it. Thus, you can provide multiple, disjoint directories, as addfiles: they will all be added in a rational manner to outfile.
The command line entry point for jlink.
Does the adding and merging.
map from a jsp file to a java filename; does not do packages
Mangle the specified character to create a legal Java class name.
The URI context of relative URI references in the JSP pages. If it does not exist then it is derived from the location of the file relative to the declared or derived value of uriroot.
Adds a reference to a classpath defined elsewhere
execute by building up a list of files that have changed and hand them off to a jsp compiler
calculate where the files will end up: this is destDir or it id destDir + the package name
do the compile
Clear the list of files to be compiled and copied..
Scans the directory looking for source files to be compiled. The results are returned in the class variable compileList
Test whether or not compilation is needed. A return value of <code>true<code> means yes, <code>false</code> means our tests do not indicate this, but as the TLDs are not used for dependency checking this is not guaranteed. The current tests are <ol> <li>no dest file <li>dest file out of date w.r.t source <li>dest file zero bytes long </ol>
get a filename from our jsp file.
map from a jsp file to a base name; does not deal with extensions
definition of the char escaping algorithm
Run the task.
Scan the array of files and add the jsp files that need to be compiled to the filesToDo field.
Replace occurrences of a string with a replacement string.
constructor creating the transformer from the junitreport task.
sets the format.
set the extension of the output files
transformation
Get the systemid of the appropriate stylesheet based on its name and styledir. If no styledir is defined it will load it as a java resource in the xsl child package, otherwise it will get it from the given directory.
If we end up using the JDK's own TraX factory on Java 9+, then set the features and attributes necessary to allow redirect extensions to be used.
Set the if attribute. If this expression evaluates to true or the name of a property which is present in project, the test will be run.
Set the unless attribute.  If this expression evaluates to false or the name of a property which is not present in project, the test will be run.
Allow a formatter nested element.
create a new batchtest instance
Add a new fileset instance to this batchtest. Whatever the fileset is, only filename that are <tt>.java</tt> or <tt>.class</tt> will be considered as 'candidates'.
Add a new ResourceCollection instance to this batchtest. Whatever the collection is, only names that are <tt>.java</tt> or <tt>.class</tt> will be considered as 'candidates'.
Return all <tt>JUnitTest</tt> instances obtain by applying the fileset rules.
Convenient method to merge the <tt>JUnitTest</tt>s of this batchtest to a <tt>Vector</tt>.
Create all <tt>JUnitTest</tt>s based on the filesets. Each instance is configured to match this instance properties.
Iterate over all filesets and return the filename of all files that end with <tt>.java</tt> or <tt>.class</tt>. This is to avoid wrapping a <tt>JUnitTest</tt> over an xml file for example. A Testcase is obviously a java file (compiled or not).
Create a <tt>JUnitTest</tt> that has the same property as this <tt>BatchTest</tt> instance.
The whole testsuite started.
The whole testsuite ended.
Interface TestListener for JUnit &lt;= 3.4. <p>A Test failed.
Interface TestListener for JUnit &gt; 3.4. <p>A Test failed.
A test caused an error.
Format an error and print it.
list a set of node that match a specific filter. The list can be made recursively or not.
Iterate over the children of a given node and return the first node that has a specific name.
Simple tree walker that will clone recursively a node. This is to avoid using parser-specific API such as Sun's <tt>changeNodeOwner</tt> when we are dealing with DOM L1 implementations since <tt>cloneNode(boolean)</tt> will not change the owner document. <tt>changeNodeOwner</tt> is much faster and avoid the costly cloning process. <tt>importNode</tt> is in the DOM L2 interface.
This method is called by the Ant runtime by reflection. We use the project reference for registration of this class as BuildListener.
Add the failed test to the list.
Add the failed test to the list.
Not used {@inheritDoc}
Logging facade in INFO-mode.
Logging facade in VERBOSE-mode.
The task outside of this JUnitResultFormatter is the <junit> task. So all tests passed and we could create the new java class.
Set whether this formatter should be used.  It will be used if the expression evaluates to true or the name of a property which has been set, otherwise it won't.
Set whether this formatter should NOT be used. It will be used if the expression evaluates to false or the name of a property which has not been set, orthwise it will not be used.
Ensures that the selector passes the conditions placed on it with <code>if</code> and <code>unless</code> properties.
Record a test as having been ignored, normally by the @Ignore annotation.
Records a test as having an assumption failure so JUnit will no longer be executing it. Under normal circumstances this would be counted as a skipped test.
Creates a new adapter for the given class and a method within the class.
If true, print one-line statistics for each test, or "withOutAndErr" to also show standard output and error. Can take the values on, off, and withOutAndErr.
Set the maximum memory to be used by all forked JVMs.
The command used to invoke the Java Virtual Machine, default is 'java'. The command is resolved by java.lang.Runtime.exec(). Ignored if fork is disabled.
Adds a system property that tests can access. This might be useful to transfer Ant properties to the testcases when JVM forking is not enabled.
Adds a system property that tests can access. This might be useful to transfer Ant properties to the testcases when JVM forking is not enabled.
Adds a set of properties that will be used as system properties that tests can access. This might be useful to transfer Ant properties to the testcases when JVM forking is not enabled.
Adds an environment variable; used when forking. <p>Will be ignored if we are not forking a new VM.</p>
Preset the attributes of the test before configuration in the build script. This allows attributes in the <junit> task be be defaults for the tests, but allows individual tests to override the defaults.
Add a new single testcase.
Adds a set of tests based on pattern matching.
Add a new formatter to all tests of this task.
Assertions to enable in this program (if fork=true)
If set, system properties will be copied to the cloned VM - as well as the bootclasspath unless you have explicitly specified a bootclasspath. <p>Doesn't have any effect unless fork is true.</p>
Whether test listener events shall be generated.
Adds the jars or directories containing Ant, this task and JUnit to the classpath - this should make the forked JVM work without having to specify them directly.
Sets up the delegate that will actually run the tests. <p>Will be invoked implicitly once the delegate is needed.</p>
Runs the testcase.
Run the tests.
Run the tests.
Execute a list of tests in a single forked Java VM.
Execute a list of tests in a single forked Java VM.
Execute a testcase by forking a new JVM. The command will block until it finishes. To know if the process was destroyed or not or whether the forked Java VM exited abnormally, use the attributes of the returned holder object.
Adding ant runtime.
Create a temporary file to pass the properties to a new process. Will auto-delete on (graceful) exit. The file will be in the project basedir unless tmpDir declares something else.
Pass output sent to System.out to the TestRunner so it can collect it for the formatters.
Pass output sent to System.out to the TestRunner so it can collect ot for the formatters.
Pass output sent to System.err to the TestRunner so it can collect it for the formatters.
Pass output sent to System.err to the TestRunner so it can collect it for the formatters.
Execute inside VM.
Merge all individual tests from the batchtest with all individual tests and return an enumeration over all <tt>JUnitTest</tt>.
Verifies all <code>test</code> elements having the <code>methods</code> attribute specified and having the <code>if</code>-condition resolved to true, that the value of the <code>methods</code> attribute is valid.
Expands a module path to flat path of jars and root folders usable by classloader.
return an enumeration listing each test, then each batchtest
Search for the given resource and add the directory or archive that contains it to the classpath. <p>Doesn't work for archives in JDK 1.1 as the URL returned by getResource doesn't contain the name of the archive.</p>
Implementation of addClasspathEntry.
Take care that some output is produced in report files if the watchdog kills the test.
Take care that some output is produced in report files if the forked machine exited before the test suite finished but the reason is not a timeout.
Take care that some output is produced in report files if the forked machine terminated before the test suite finished
Creates and configures an AntClassLoader instance from the nested classpath element.
Removes resources. <p>Is invoked in  {@link #execute execute}.  Subclasses that don't invoke execute should invoke this method in a finally block.</p>
Removes a classloader if needed.
Get the command line used to run the tests.
Executes all tests that don't need to be forked (or all tests if the runIndividual argument is true.  Returns a collection of lists of tests that share the same VM configuration and haven't been executed yet.
Logs information about failed tests, potentially stops processing (by throwing a BuildException) if a failure/error occurred or sets a property.
Creates a JUnitTest instance that shares all flags with the passed in instance but has a more meaningful name. <p>If a VM running multiple tests crashes, we don't know which test failed.  Prior to Ant 1.8.0 Ant would log the error with the last test of the batch test, which caused some confusion since the log might look as if a test had been executed last that was never started.  With Ant 1.8.0 the test's name will indicate that something went wrong with a test inside the batch without giving it a real name.</p>
{@inheritDoc}. 
Get names of individual test methods to be executed.
Parses a comma-separated list of method names and check their validity.
Set the properties to be used in the test.
Check if this test should run based on the if and unless attributes.
Get the formatters set for this test.
Convenient method to add formatters to a vector
Run the test.
Interface TestListener. <p>A new Test is started.
Interface TestListener. <p>A Test is finished.
Interface TestListener for JUnit &lt;= 3.4. <p>A Test failed.
Interface TestListener for JUnit &gt; 3.4. <p>A Test failed.
Interface TestListener. <p>An error occurred while running the test.
Tries to find the name of the class which a test represents across JUnit 3 and 4. For JUnit4 it parses the toString() value of the test, and extracts it from there.
Empty
The whole testsuite started.
Interface TestListener. <p>A new Test is started.
Interface TestListener for JUnit &lt;= 3.4. <p>A Test failed.
Interface TestListener for JUnit &gt; 3.4. <p>A Test failed.
Interface TestListener. <p>An error occurred while running the test.
The testsuite started.
Interface TestListener for JUnit &gt; 3.4. <p>A Test failed.
The whole testsuite ended.
Records the suite's name to later determine the class to invoke tearDown on.
Only invoke tearDown if the suite is known and not the dummy test we get when a Batch fails and the error is an actual error generated by Ant.
{@inheritDoc}. 
{@inheritDoc}. 
The whole testsuite started.
The whole testsuite ended.
Interface TestListener. <p>A new Test is started.
Interface TestListener. <p>A Test is finished.
Interface TestListener for JUnit &lt;= 3.4. <p>A Test failed.
Interface TestListener for JUnit &gt; 3.4. <p>A Test failed.
Interface TestListener. <p>An error occurred while running the test.
Generate a report based on the document created by the merge.
Add a new fileset containing the XML results to aggregate
Aggregate all testsuites into a single document and write it to the specified directory and file.
Get all <code>.xml</code> files in the fileset.
Splits the task into setting up the command line switches
Sets up the initial command line. <p>only the -encoding argument and nested arg elements get handled here.</p>
Adds source and dest files to the command line. <p>This implementation adds them without any leading qualifiers, source first.</p>
{@inheritDoc} 
{@inheritDoc} 
A set of files to upload or download
Sets the FTP action to be taken. Currently accepts "put", "get", "del", "mkdir", "chmod", "list", and "site".
Sets the FTP action to be taken. Currently accepts "put", "get", "del", "mkdir", "chmod", "list", and "site".
Sets the systemTypeKey attribute. Method for setting <code>FTPClientConfig</code> remote system key.
Sets the defaultDateFormatConfig attribute.
Sets the recentDateFormatConfig attribute.
Sets the serverLanguageCode attribute.
Sets the serverTimeZoneConfig attribute.
Sets the shortMonthNamesConfig attribute
Executable a retryable object.
For each file in the fileset, do the appropriate action: send, get, delete, or list.
Sends all files specified by the configured filesets to the remote server.
Creates all parent directories specified in a complete relative pathname. Attempts to create existing directories will not cause errors.
auto find the time difference between local and remote
find a suitable name for local and remote temporary file
Checks to see if the remote file is current as compared with the local file. Returns true if the target file is up to date.
Sends a site command to the ftp server
Sends a single file to the remote host. <code>filename</code> may contain a relative path specification. When this is the case, <code>sendFile</code> will attempt to create any necessary parent directories before sending the file. The file will then be sent using the entire relative path spec - no attempt is made to change directories. It is anticipated that this may eventually cause problems with some FTP servers, but it simplifies the coding.
Delete a file from the remote host.
Delete a directory, if empty, from the remote host.
Retrieve a single file from the remote host. <code>filename</code> may contain a relative path specification. <p> The file will then be retrieved using the entire relative path spec - no attempt is made to change directories. It is anticipated that this may eventually cause problems with some FTP servers, but it simplifies the coding.</p>
List information about a single file from the remote host. <code>filename</code> may contain a relative path specification. <p> The file listing will then be retrieved using the entire relative path spec - no attempt is made to change directories. It is anticipated that this may eventually cause problems with some FTP servers, but it simplifies the coding.</p>
Create the specified directory on the remote host.
look at the response for a failed mkdir action, decide whether it matters or not. If it does, we throw an exception
Runs the task.
configures the supplied FTPClient with the various attributes set in the supplied FTP task.
A set of files to upload or download
Sets the FTP action to be taken. Currently accepts "put", "get", "del", "mkdir", "chmod", "list", and "site".
Sets the FTP action to be taken. Currently accepts "put", "get", "del", "mkdir", "chmod", "list", and "site".
Sets the systemTypeKey attribute. Method for setting <code>FTPClientConfig</code> remote system key.
Sets the defaultDateFormatConfig attribute.
Sets the recentDateFormatConfig attribute.
Sets the serverLanguageCode attribute.
Sets the serverTimeZoneConfig attribute.
Sets the shortMonthNamesConfig attribute
Runs the task.
Executable a retryable object.
For each file in the fileset, do the appropriate action: send, get, delete, or list.
Sends all files specified by the configured filesets to the remote server.
Creates all parent directories specified in a complete relative pathname. Attempts to create existing directories will not cause errors.
auto find the time difference between local and remote
find a suitable name for local and remote temporary file
Checks to see if the remote file is current as compared with the local file. Returns true if the target file is up to date.
Sends a site command to the ftp server
Sends a single file to the remote host. <code>filename</code> may contain a relative path specification. When this is the case, <code>sendFile</code> will attempt to create any necessary parent directories before sending the file. The file will then be sent using the entire relative path spec - no attempt is made to change directories. It is anticipated that this may eventually cause problems with some FTP servers, but it simplifies the coding.
Delete a file from the remote host.
Delete a directory, if empty, from the remote host.
Retrieve a single file from the remote host. <code>filename</code> may contain a relative path specification. <p> The file will then be retreived using the entire relative path spec - no attempt is made to change directories. It is anticipated that this may eventually cause problems with some FTP servers, but it simplifies the coding.</p>
List information about a single file from the remote host. <code>filename</code> may contain a relative path specification. <p> The file listing will then be retrieved using the entire relative path spec - no attempt is made to change directories. It is anticipated that this may eventually cause problems with some FTP servers, but it simplifies the coding.</p>
Create the specified directory on the remote host.
look at the response for a failed mkdir action, decide whether it matters or not. If it does, we throw an exception
Executes this build task.
A string to wait for from the server. A subTask &lt;read&gt; tag was found.  Create the object, Save it in our list, and return it.
Add text to send to the server A subTask &lt;write&gt; tag was found.  Create the object, Save it in our list, and return it.
Verify that all parameters are included. Connect and possibly login. Iterate through the list of Reads and writes.
Process a 'typical' login.  If it differs, use the read and write tasks explicitly
Deals with multiple read/write calls.
if the proxy port and host settings are not null, then the settings get applied these settings last beyond the life of the object and apply to all network connections Relevant docs: buglist #4183340
list out what is going on
Does the work.
Verify that all parameters are included. Connect and possibly login Iterate through the list of Reads and writes
Process a 'typical' login.  If it differs, use the read and write tasks explicitly
A string to wait for from the server. A subTask &lt;read&gt; tag was found.  Create the object, Save it in our list, and return it.
Add text to send to the server A subTask &lt;write&gt; tag was found.  Create the object, Save it in our list, and return it.
Parses the file and creates the folders specified in the output section
Simple hack to handle the PVCS command-line tools botch when handling UNC notation.
Specify a project within the PVCS repository to extract files from.
Sets a configuration file other than the default to be used. These files have a .cfg extension and are often found in archive or pvcsprop folders.
Set the project.
Add an attribute definition to this script.
Add a nested element definition.
Define the script.
Find or create the script repository - it is stored in the project. This method is synchronized on the project under  {@link MagicNames#SCRIPT_REPOSITORY}
Create a nested element to be configured.
Execute the script.
Execute the script. This is called by the script instance to execute the script for this definition.
Defines the manager.
Defines the language (required).
Load the script from an external file ; optional.
Set the script text.
Add any source resource.
Locate the script defining task and execute the script by passing control to it
Create a nested element
Set a task attribute
Set the script text.
The directory where soscmd(.exe) is located. soscmd must be on the path if omitted.
Override the working directory and get to the specified path.
Build the command line. <p> CheckInFile required parameters: -server -name -password -database -project -file<br> CheckInFile optional parameters: -workdir -log -verbose -nocache -nocompression -soshome<br> CheckInProject required parameters: -server -name -password -database -project<br> CheckInProject optional parameters: workdir -recursive -log -verbose -nocache -nocompression -soshome<br>
Build the command line <br> CheckOutFile required parameters: -server -name -password -database -project -file<br> CheckOutFile optional parameters: -workdir -verbose -nocache -nocompression -soshome<br> CheckOutProject required parameters: -server -name -password -database -project<br> CheckOutProject optional parameters:-workdir -recursive -verbose -nocache -nocompression -soshome<br>
Build the command line <br> GetFile required parameters: -server -name -password -database -project -file<br> GetFile optional parameters: -workdir -revision -verbose -nocache -nocompression -soshome<br> GetProject required parameters: -server -name -password -database -project<br> GetProject optional parameters: -label -workdir -recursive -verbose -nocache -nocompression -soshome<br>
Build the command line <br> AddLabel required parameters: -server -name -password -database -project -label<br> AddLabel optional parameters: -verbose -comment<br>
Plays the file for duration milliseconds or loops.
This is implemented to listen for any line events and closes the clip if required.
Fired after the last target has finished. This event will still be thrown if an error occurred during the build.
Execute the task.
Execute the task.
Open an ssh channel.
Open an ssh sftp channel.
Send an ack.
Reads the response, throws a BuildException if the response indicates an error.
Add a directory to the child directories.
Add a file to the list of files.
The equality method. This checks if the directory field is the same.
Convert a file path to an array of path components. This uses File.separator to split the file path string.
Sets the file to be transferred.  This can either be a remote file or a local file.  Remote files take the form:<br> <i>user:password@host:/directory/path/file.example</i><br> Files to transfer can also include a wildcard to include all files in a remote directory.  For example:<br> <i>user:password@host:/directory/path/*</i><br>
Sets the location where files will be transferred to. This can either be a remote directory or a local directory. Remote directories take the form of:<br> <i>user:password@host:/directory/path/</i><br> This parameter is required.
Similar to  {@link #setFile setFile} but explicitly states thatthe file is a local file.  This is the only way to specify a local file with a @ character.
Similar to  {@link #setFile setFile} but explicitly states thatthe file is a remote file.
Similar to  {@link #setTodir setTodir} but explicitly statesthat the directory is a local.  This is the only way to specify a local directory with a @ character.
Similar to  {@link #setTodir setTodir} but explicitly statesthat the directory is a remote.
Changes the file name to the given name while receiving it, only useful if receiving a single file.
Changes the file name to the given name while sending it, only useful if sending a single file.
Set the file mode, defaults to "644".
Set the dir mode, defaults to "755".
Adds a FileSet transfer to remote host.  NOTE: Either addFileSet() or setFile() are required.  But, not both.
Adds a ResourceCollection of local files to transfer to remote host.
Carry out the transfer.
returns the directory part of the remote file, if any.
Carry out the transfer.
Carry out the transfer.
Carry out the transfer.
Username known to remote host.
Sets the password for the user.
Sets the keyfile for the user.
Sets the passphrase for the users key.
Setting this to true trusts hosts whose identity is unknown.
Open an ssh session.
Execute the command on the remote host.
Add a nested task to Sequential. <p>
Changes the comma-delimited list of local tunnels to establish on the connection.
Changes the comma-delimited list of remote tunnels to establish on the connection.
Establish the ssh session and execute all nestedTasks
Implementation of UIKeyboardInteractive#promptKeyboardInteractive.
Set the error text; all properties are expanded in the message.
Log if the definition is overriding something
Add a condition element.
Add an application.
Add a setup sequence.
Add a block.
add tests.
set reporting sequence of tasks.
set teardown sequence of tasks.
Set the timeoutunit attribute.
Set the shutdownunit attribute.
Bind and initialise a task
Create a newly bound parallel instance
Create a newly bound parallel instance with one child
Run the functional test sequence. <p> This is a fairly complex workflow -what is going on is that we try to clean up no matter how the run ended, and to retain the innermost exception that got thrown during cleanup. That is, if teardown fails after the tests themselves failed, it is the test failing that is more important.
Now faults are analysed. <p> The priority is <ol> <li>testexceptions, except those indicating a build timeout when the application itself failed.<br> (because often it is the application fault that is more interesting than the probe failure, which is usually triggered by the application not starting </li><li> Application exceptions (above test timeout exceptions) </li><li> Teardown exceptions -except when they are being ignored </li><li> Test failures as indicated by the failure property </li></ol>
log that we are ignoring something rather than rethrowing it.
Set the file which should have its access attributes modified.
Set the group attribute.
Set the owner attribute.
Initialize the task.
Return all variables to their default state for the next invocation.
Add a fileset to this task.
Delete a symlink (without deleting the associated resource). <p>This is a convenience method that simply invokes <code>deleteSymlink(java.io.File)</code>.
Delete a symlink (without deleting the associated resource). <p>This is a utility method that removes a unix symlink without removing the resource that the symlink points to. If it is accidentally invoked on a real file, the real file will not be harmed.</p> <p>This method works by getting the canonical path of the link, using the canonical path to rename the resource (breaking the link) and then deleting the link. The resource is then returned to its original name inside a finally block to ensure that the resource is unharmed even in the event of an exception.</p> <p>Since Ant 1.8.0 this method will try to delete the File object if it reports it wouldn't exist (as symlinks pointing nowhere usually do). Prior version would throw a FileNotFoundException in that case.</p>
Write a properties file. This method uses <code>Properties.store</code> and thus may throw exceptions that occur while writing the file.
Handle errors based on the setting of failonerror.
Conduct the actual construction of a link. <p> The link is constructed by calling <code>Execute.runCommand</code>.
Find all the links in all supplied filesets. <p> This method is invoked when the action attribute is &quot;record&quot;. This means that filesets are interpreted as the directories in which links may be found.
Load links from properties files included in one or more FileSets. <p> This method is only invoked when the action attribute is set to &quot;recreate&quot;. The filesets passed in are assumed to specify the names of the property files with the link information and the subdirectories in which to look for them.
Builds a command line to execute ss.
Override the project working directory.
Builds a command line to execute ss.
Builds a command line to execute ss.
Builds a command line to execute ss.
Builds a command line to execute ss.
Builds a command line to execute ss.
Builds a command line to execute ss.
Output style. Valid options are: <ul> <li>brief:    -B Display a brief history. <li>codediff: -D Display line-by-line file changes. <li>nofile:   -F- Do not display individual file updates in the project history. <li>default:  No option specified. Display in Source Safe's default format. </ul>
Builds a command line to execute ss.
A file to be attribed.
Set the ReadOnly file attribute.
Set the Archive file attribute.
Set the System file attribute.
Set the Hidden file attribute.
Implement the gunzipping.
Compress the zipFile.
Add a fileset to which contains a collection of root classes used to drive the search from classes.
Create a ClassfileSet from another ClassfileSet.
Set the root class attribute.
Return the DirectoryScanner associated with this FileSet.
Add a nested root class definition to this class file set.
Get the names of the class files on which baseClass depends.
Scans the base directory for files on which baseClass depends.
{@inheritDoc}. 
{@inheritDoc}. 
{@inheritDoc}. 
Add an ellipse.
Add an arc.
{@inheritDoc}. 
{@inheritDoc}. 
Add a rotate to the operation.
Add a draw to the operation.
Add a rectangle to the operation.
Add text to the operation.
Add a scale to the operation.
{@inheritDoc}. 
Sets the angle of rotation in degrees.
Rotate an image.
Performs the image rotation when being handled as a TransformOperation.
Performs the image rotation when being handled as a DrawOperation. It absolutely requires that there be a DrawOperation nested beneath it, but only the FIRST DrawOperation will be handled since it can only return ONE image.
Sets the behaviour regarding the image proportions.
Get the width.
Get the height.
Scale an image.
{@inheritDoc}. 
{@inheritDoc}. 
Set the number of points to be used.
Draw the text.
Add a delegate ResourceComparator.
Equality method based on the vector of resources, or if a reference, the referredto object.
Compare two Resources.
Compare two Resources.
Compare two objects.
Construct a new Reverse, supplying the ResourceComparator to be reversed.
Add the ResourceComparator to reverse.
Compare two Resources.
Add a ResourceComparator to this Compare selector. If multiple ResourceComparators are added, they will be processed in LIFO order.
Create the nested control element. These are the resources to compare against.
{@inheritDoc} 
Return true if this Resource is selected.
Return true if this Resource is selected.
Convenience constructor.
Construct a new ResourceSelectorContainer with the specified array of selectors.
Add a ResourceSelector to the container.
Learn whether this ResourceSelectorContainer has selectors.
Get the count of nested selectors.
Return an Iterator over the nested selectors.
Convenience constructor.
Return true if this Resource is selected.
Computes a value for a file content with the specified checksum algorithm.
Override Object.toString().
Computes a value for a file content with the specified digest algorithm.
Override Object.toString().
Computes a 'hashvalue' for a file content. It reads the content of a file, convert that to String and use the String.hashCode() method.
Overrides BaseSelector.verifySettings(). 
Configures this Selector. Does this work only once per Selector object. <p>Because some problems while configuring from <custom>Selector the configuration is done in the following order:<ol> <li> collect the configuration data </li> <li> wait for the first isSelected() call </li> <li> set the default values </li> <li> set values for name pattern '*': update, cache, algorithm, comparator </li> <li> set values for name pattern '*.*: cache.cachefile, ... </li> </ol></p> <p>This configuration algorithm is needed because you don't know the order of arriving config-data. E.g. if you first set the <i>cache.cachefilename</i> and after that the <i>cache</i> itself, the default value for cachefilename is used, because setting the cache implies creating a new Cache instance - with its defaults.</p>
The business logic of this selector for use as ResourceSelector of FileSelector.
save the cache file
Support for nested &lt;param&gt; tags.
Support for nested &lt;param&gt; tags.
Support for nested <param name="" value=""/> tags. Parameter named <i>cache</i>, <i>algorithm</i>, <i>comparator</i> or <i>update</i> are mapped to the respective set-Method. Parameter which names starts with <i>cache.</i> or <i>algorithm.</i> or <i>comparator.</i> are tried to set on the appropriate object via its set-methods. Other parameters are invalid and an BuildException will be thrown.
Try to set a value on an object using reflection. Helper method for easier access to IntrospectionHelper.setAttribute().
Override Object.toString().
Signals that the last target has finished.
Signals that a target has finished.
Signals that a task has finished.
Deletes the cache and its underlying file. 
Returns a value for a given key from the cache.
Saves a key-value-pair in the cache.
Returns an iterator over the keys in the cache.
Override Object.toString().
Determine the dependencies of the configured root classes.
Clear the current set of collected dependencies. 
Visit a class reference
Visit a name and type ref Look for class references in this
Visit a field of the class.
Visit a Java class
Visit a method of the current class
Add a classname to the list of dependency classes
Add all the classes from a descriptor string.
Adds a class name in slash format (for example org/apache/tools/ant/Main).
Determine the dependencies of the configured root classes.
test for bugzilla 48932
load the file from the caller classloader that loaded this class 
keep it simple stupid 
This is a positive test for the super grammar (glib) option.  ANTLR will throw an error if everything is not correct.
This test creates an html-ized version of the calculator grammar. The sanity check is simply whether or not an html file was generated.
This is just a quick sanity check to run the diagnostic option and make sure that it doesn't throw any funny exceptions.
This is just a quick sanity check to run the trace option and make sure that it doesn't throw any funny exceptions.
This is just a quick sanity check to run all the rest of the trace options (traceLexer, traceParser, and traceTreeWalker) to make sure that they don't throw any funny exceptions.
try a keyword in a file
what happens to 1nvalid-classname
webapp test is currently broken, because it picks up on the missing_tld file, and bails.
run a target then verify the named file gets created
verify that a named file was created
verify that we select the appropriate mangler
assert our mapping rules
A unit test for JUnit- Exercises the propertyfile tasks ability to update properties that are already defined-
test with no namespace
add namespace awareness.
catalogfiles fileset should be ignored if resolver.jar is not present, but will be used if it is.  either way, test should work b/c we have a nested dtd with the same entity
Test nested catalogpath. It should be ignored if resolver.jar is not present, but will be used if it is.  either way, test should work b/c we have a nested dtd with the same entity
Basic inline 'dtd' element test.
Test indirect validation.
Test that the nested dtd element is used when resolver.jar is not present.  This test should pass either way.
Test nested catalogpath. Test that the nested dtd element is used when resolver.jar is not present.  This test should pass either way.
Test nested xmlcatalog definitions
iso-2022-jp.xml is valid but wouldn't get recognized on systems with a different native encoding. Bug 11279
check that the system id gets set properly on stylesheets.
Worker method for the two convenience methods above. Applies a selector on a set of files passed in and returns a string of "T"s amd "F"s from applying the selector to each file.
Test the code that validates the selector.
Tests to make sure that the selector is selecting files correctly.
Test the code that validates the selector.
Tests to make sure that the selector is selecting files correctly.
Test the code that validates the selector.
Tests to make sure that the selector is selecting files correctly.
Test the code that validates the selector.
Tests to make sure that the selector is selecting files correctly.
Extracts the real used algorithm name from the ModifiedSelector using its toString() method.
Propertycache must have a set 'cachefile' attribute. The default in ModifiedSelector "cache.properties" is set by the selector.
Checks whether a cache file is created. 
Checks whether a cache file is created. 
In earlier implementations there were problems with the <i>order</i> of the <param>s. The scenario was <pre> <custom class="ModifiedSelector"> <param name="cache.cachefile" value="mycache.properties" /> <param name="cache" value="propertyfiles" /> </custom> </pre> It was important first to set the cache and then to set the cache's configuration parameters. That results in the reorganized configure() method of ModifiedSelector. This testcase tests that.
Test the interface semantic of Caches. This method does some common test for cache implementations. A cache must return a stored value and a valid iterator. After calling the delete() the cache must be empty.
Test the interface semantic of Algorithms. This method does some common test for algorithm implementations. An algorithm must return always the same value for the same file and it must not return <i>null</i>.
Test the interface semantic of Comparators. This method does some common test for comparator implementations.
Tests whether the seldirs attribute is used.
Complex test scenario using default values (DigestAlgorithm with MD5, PropertiesfileCache with file=cache.properties, EqualComparator and update=true). <ol> <li> try fist time --> should select all </li> <li> try second time --> should select no files (only directories) </li> <li> modify timestamp of one file and content of a nother one </li> <li> try third time --> should select only the file with modified content </li>
This scenario is based on scenario 1, but does not use any default value and its based on <custom> selector. Used values are:<ul> <li><b>Cache: </b> Propertyfile, cachefile={java.io.tmpdir}/mycache.txt </li> <li><b>Algorithm: </b> Digest algorithm=SHA, Provider=null </li> <li><b>Comparator: </b> java.text.RuleBasedCollator <li><b>Update: </b> true </li>
Creates a configured parameter object.
Does the selection test for a given selector and prints the filenames of the differing files (selected but shouldn't, not selected but should).
Checks which files are selected and shouldn't be or which are not selected but should.
Resolves a diff-String (@see diff()) against the (inherited) filenames- and files arrays.
Test the code that validates the selector.
Tests to make sure that the selector is selecting files correctly.
Test the code that validates the selector.
Tests to make sure that the selector is selecting files correctly.
Test the code that validates the selector.
Tests to make sure that the selector is selecting files correctly.
Read the entry from a stream.
Resolve this class info against the given constant pool.
Initialise the constant pool. 
Read the constant pool from a class input stream.
Add an entry to the constant pool.
Get the index of a given UTF8 constant pool entry.
Get the index of a given CONSTANT_CLASS entry in the constant pool.
Get the index of a given constant value entry in the constant pool.
Get the index of a given CONSTANT_METHODREF entry in the constant pool.
Get the index of a given CONSTANT_INTERFACEMETHODREF entry in the constant pool.
Get the index of a given CONSTANT_FIELDREF entry in the constant pool.
Get the index of a given CONSTANT_NAMEANDTYPE entry in the constant pool.
Dump the constant pool to a string.
Read a constant pool entry from a stream. This is a factory method which reads a constant pool entry form a stream and returns the appropriate subclass for the entry.
read a constant pool entry from a class stream.
read a constant pool entry from a class stream.
Resolve this constant pool entry with respect to its dependents in the constant pool.
read a constant pool entry from a class stream.
read a constant pool entry from a class stream.
read a constant pool entry from a class stream.
Resolve this constant pool entry with respect to its dependents in the constant pool.
read a constant pool entry from a class stream.
Resolve this constant pool entry with respect to its dependents in the constant pool.
read a constant pool entry from a class stream.
read a constant pool entry from a class stream.
Resolve this constant pool entry with respect to its dependents in the constant pool.
read a constant pool entry from a class stream.
Resolve this constant pool entry with respect to its dependents in the constant pool.
read a constant pool entry from a class stream.
Resolve this constant pool entry with respect to its dependents in the constant pool.
read a constant pool entry from a class stream.
Resolve this constant pool entry with respect to its dependents in the constant pool.
read a constant pool entry from a class stream.
Resolve this constant pool entry with respect to its dependents in the constant pool.
read a constant pool entry from a class stream.
Returns the resolved file
Returns the file resolved from URL and directory
Logs the compilation parameters, adds the files to compile and logs the &quot;niceSourceList&quot;
add an argument oneple to the argument list, if the value aint null
add an argument tuple to the argument list, if the value aint null
add an argument tuple to the arg list, if the file parameter aint null
Our execute method.
build up a command line
Test direct dependency removal
Test dependency traversal (closure)
Test that inner class dependencies trigger deletion of the outer class
Test that multi-leve inner class dependencies trigger deletion of the outer class
Read the result fileset into a Hashtable
Test mutual dependency between inner and outer do not cause both to be deleted
Test the operation of the cache
Test the detection and warning of non public classes
Test simple
Test xml
Test fork - forked output goes to log
Test fork xml
Test timeout
Test timeout without timing out
Verifies that no empty junit-noframes.html is generated when frames output is selected via the default. Needs reports1 task from junitreport.xml.
The JUnit setup method.
Bugzilla Report 32973 
Test inspired by Bug#1415.
Tests the combination of the newer parameter and the  serverTimezoneConfig  parameter in the PUT action.  The default  configuration is an ftp server on localhost which formats  timestamps as GMT.
Tests the combination of the newer parameter and the  serverTimezoneConfig  parameter in the GET action.  The default  configuration is an ftp server on localhost which formats  timestamps as GMT.
Tests that the presence of one of the server config params forces the system type to Unix if not specified.
Tests the systemTypeKey attribute.
Tests the systemTypeKey attribute with UNIX specified.
Tests the systemTypeKey attribute.
this test is inspired by a user reporting that deletions of directories with the ftp task do not work
Test SOSGetFile flags & commandline generation  
Test SOSGetProject flags & commandline generation  
Tests SOSGet required attributes.  
Test CheckInFile option flags  
Test CheckInProject option flags  
Test SOSCheckIn required attributes.  
Test CheckOutFile option flags  
Test CheckOutProject option flags  
Test SOSCheckout required attributes.  
Test Label option flags  
Test SOSLabel required attributes.  
Iterate through the generated command line comparing it to reference one.
Tests VSSGet required attributes.  
Tests Label commandline generation.  
Tests Label commandline generation with a label of more than 31 chars.  
Test VSSLabel required attributes.
Tests VSSHistory commandline generation with from label.  
Tests VSSHistory commandline generation with from date.  
Tests VSSHistory commandline generation with date calculation.  
Tests VSSHistory required attributes.
Tests CheckIn commandline generation.  
Test VSSCheckIn required attributes.
Tests CheckOut commandline generation.  
Test VSSCheckout required attributes.
Tests Add commandline generation.  
Test VSSAdd required attributes.
Tests CP commandline generation.  
Test VSSCP required attributes.
Tests Create commandline generation.  
Test VSSCreate required attributes.
Iterate through the generated command line comparing it to reference one.
Test basic classfileset
Test small classfileset
Test combo classfileset
Test that you can pass a classfileset by reference to a fileset.
Test that classes included in a method "System.out.println(MyClass.class)" are included.
Test that classes included in a method "System.out.println(Outer.Inner.class)" are included.
